{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"NeuPy","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyOxZOqQ7ZE8uAWNBb8nWboB"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"f-qBkE21GBo1","executionInfo":{"status":"ok","timestamp":1640029056914,"user_tz":-60,"elapsed":17884,"user":{"displayName":"Charles Oredola","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnpwCalP23D3Pr8M6WnJ42nMBIpm7KfjhgDPqn=s64","userId":"14286154376090524793"}},"outputId":"86a21c44-51a3-436f-8d98-90fd975d2477"},"outputs":[{"output_type":"stream","name":"stdout","text":["(506, 13)\n","(506,)\n"]}],"source":["import warnings\n","warnings.filterwarnings('ignore')\n","\n","from sklearn import datasets\n","\n","dataset = datasets.load_boston()\n","data, target = dataset.data, dataset.target\n","\n","print(data.shape)\n","print(target.shape)"]},{"cell_type":"code","source":["print(dataset.DESCR)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9SgXfI34GKYt","executionInfo":{"status":"ok","timestamp":1640029075338,"user_tz":-60,"elapsed":3721,"user":{"displayName":"Charles Oredola","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnpwCalP23D3Pr8M6WnJ42nMBIpm7KfjhgDPqn=s64","userId":"14286154376090524793"}},"outputId":"e72ecd09-8848-4210-c8df-91e92600530e"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":[".. _boston_dataset:\n","\n","Boston house prices dataset\n","---------------------------\n","\n","**Data Set Characteristics:**  \n","\n","    :Number of Instances: 506 \n","\n","    :Number of Attributes: 13 numeric/categorical predictive. Median Value (attribute 14) is usually the target.\n","\n","    :Attribute Information (in order):\n","        - CRIM     per capita crime rate by town\n","        - ZN       proportion of residential land zoned for lots over 25,000 sq.ft.\n","        - INDUS    proportion of non-retail business acres per town\n","        - CHAS     Charles River dummy variable (= 1 if tract bounds river; 0 otherwise)\n","        - NOX      nitric oxides concentration (parts per 10 million)\n","        - RM       average number of rooms per dwelling\n","        - AGE      proportion of owner-occupied units built prior to 1940\n","        - DIS      weighted distances to five Boston employment centres\n","        - RAD      index of accessibility to radial highways\n","        - TAX      full-value property-tax rate per $10,000\n","        - PTRATIO  pupil-teacher ratio by town\n","        - B        1000(Bk - 0.63)^2 where Bk is the proportion of black people by town\n","        - LSTAT    % lower status of the population\n","        - MEDV     Median value of owner-occupied homes in $1000's\n","\n","    :Missing Attribute Values: None\n","\n","    :Creator: Harrison, D. and Rubinfeld, D.L.\n","\n","This is a copy of UCI ML housing dataset.\n","https://archive.ics.uci.edu/ml/machine-learning-databases/housing/\n","\n","\n","This dataset was taken from the StatLib library which is maintained at Carnegie Mellon University.\n","\n","The Boston house-price data of Harrison, D. and Rubinfeld, D.L. 'Hedonic\n","prices and the demand for clean air', J. Environ. Economics & Management,\n","vol.5, 81-102, 1978.   Used in Belsley, Kuh & Welsch, 'Regression diagnostics\n","...', Wiley, 1980.   N.B. Various transformations are used in the table on\n","pages 244-261 of the latter.\n","\n","The Boston house-price data has been used in many machine learning papers that address regression\n","problems.   \n","     \n",".. topic:: References\n","\n","   - Belsley, Kuh & Welsch, 'Regression diagnostics: Identifying Influential Data and Sources of Collinearity', Wiley, 1980. 244-261.\n","   - Quinlan,R. (1993). Combining Instance-Based and Model-Based Learning. In Proceedings on the Tenth International Conference of Machine Learning, 236-243, University of Massachusetts, Amherst. Morgan Kaufmann.\n","\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","# Create a dataframe\n","df = pd.DataFrame(dataset.data, columns = dataset.feature_names)\n","df['target'] = dataset.target\n","\n","df.sample(4)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":173},"id":"UKcY_HfITbzn","executionInfo":{"status":"ok","timestamp":1640029097007,"user_tz":-60,"elapsed":24,"user":{"displayName":"Charles Oredola","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnpwCalP23D3Pr8M6WnJ42nMBIpm7KfjhgDPqn=s64","userId":"14286154376090524793"}},"outputId":"9d916428-240e-4d36-d4ea-078c95daa2c0"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/html":["\n","  <div id=\"df-89804c7c-f710-4b84-9b95-7e752c94ee97\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>CRIM</th>\n","      <th>ZN</th>\n","      <th>INDUS</th>\n","      <th>CHAS</th>\n","      <th>NOX</th>\n","      <th>RM</th>\n","      <th>AGE</th>\n","      <th>DIS</th>\n","      <th>RAD</th>\n","      <th>TAX</th>\n","      <th>PTRATIO</th>\n","      <th>B</th>\n","      <th>LSTAT</th>\n","      <th>target</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>450</th>\n","      <td>6.71772</td>\n","      <td>0.0</td>\n","      <td>18.10</td>\n","      <td>0.0</td>\n","      <td>0.713</td>\n","      <td>6.749</td>\n","      <td>92.6</td>\n","      <td>2.3236</td>\n","      <td>24.0</td>\n","      <td>666.0</td>\n","      <td>20.2</td>\n","      <td>0.32</td>\n","      <td>17.44</td>\n","      <td>13.4</td>\n","    </tr>\n","    <tr>\n","      <th>212</th>\n","      <td>0.21719</td>\n","      <td>0.0</td>\n","      <td>10.59</td>\n","      <td>1.0</td>\n","      <td>0.489</td>\n","      <td>5.807</td>\n","      <td>53.8</td>\n","      <td>3.6526</td>\n","      <td>4.0</td>\n","      <td>277.0</td>\n","      <td>18.6</td>\n","      <td>390.94</td>\n","      <td>16.03</td>\n","      <td>22.4</td>\n","    </tr>\n","    <tr>\n","      <th>123</th>\n","      <td>0.15038</td>\n","      <td>0.0</td>\n","      <td>25.65</td>\n","      <td>0.0</td>\n","      <td>0.581</td>\n","      <td>5.856</td>\n","      <td>97.0</td>\n","      <td>1.9444</td>\n","      <td>2.0</td>\n","      <td>188.0</td>\n","      <td>19.1</td>\n","      <td>370.31</td>\n","      <td>25.41</td>\n","      <td>17.3</td>\n","    </tr>\n","    <tr>\n","      <th>244</th>\n","      <td>0.20608</td>\n","      <td>22.0</td>\n","      <td>5.86</td>\n","      <td>0.0</td>\n","      <td>0.431</td>\n","      <td>5.593</td>\n","      <td>76.5</td>\n","      <td>7.9549</td>\n","      <td>7.0</td>\n","      <td>330.0</td>\n","      <td>19.1</td>\n","      <td>372.49</td>\n","      <td>12.50</td>\n","      <td>17.6</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-89804c7c-f710-4b84-9b95-7e752c94ee97')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-89804c7c-f710-4b84-9b95-7e752c94ee97 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-89804c7c-f710-4b84-9b95-7e752c94ee97');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["        CRIM    ZN  INDUS  CHAS    NOX  ...    TAX  PTRATIO       B  LSTAT  target\n","450  6.71772   0.0  18.10   0.0  0.713  ...  666.0     20.2    0.32  17.44    13.4\n","212  0.21719   0.0  10.59   1.0  0.489  ...  277.0     18.6  390.94  16.03    22.4\n","123  0.15038   0.0  25.65   0.0  0.581  ...  188.0     19.1  370.31  25.41    17.3\n","244  0.20608  22.0   5.86   0.0  0.431  ...  330.0     19.1  372.49  12.50    17.6\n","\n","[4 rows x 14 columns]"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["from sklearn import preprocessing\n","\n","data_scaler = preprocessing.MinMaxScaler()\n","target_scaler = preprocessing.MinMaxScaler()\n","\n","data = data_scaler.fit_transform(data)\n","target = target_scaler.fit_transform(target.reshape(-1, 1))"],"metadata":{"id":"zNOnBR9iGZsJ","executionInfo":{"status":"ok","timestamp":1640029117068,"user_tz":-60,"elapsed":2238,"user":{"displayName":"Charles Oredola","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnpwCalP23D3Pr8M6WnJ42nMBIpm7KfjhgDPqn=s64","userId":"14286154376090524793"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["!pip install neupy"],"metadata":{"id":"jNiKGiMzWuBG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","from neupy import utils\n","\n","# Make sure that split between train and\n","# validation datasets will be reproducible\n","utils.reproducible()\n","\n","x_train, x_test, y_train, y_test = train_test_split(\n","    # 85% of the data we will use for training\n","    # and the other 15% will be used for validation\n","    data, target, test_size=0.15\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OM7IP6NDGfn0","executionInfo":{"status":"ok","timestamp":1640029170019,"user_tz":-60,"elapsed":35634,"user":{"displayName":"Charles Oredola","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnpwCalP23D3Pr8M6WnJ42nMBIpm7KfjhgDPqn=s64","userId":"14286154376090524793"}},"outputId":"504d420e-0d9a-4684-ab75-795a326c81dd"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting neupy\n","  Downloading neupy-0.8.2-py2.py3-none-any.whl (226 kB)\n","\u001b[?25l\r\u001b[K     |█▌                              | 10 kB 18.5 MB/s eta 0:00:01\r\u001b[K     |███                             | 20 kB 23.6 MB/s eta 0:00:01\r\u001b[K     |████▍                           | 30 kB 27.2 MB/s eta 0:00:01\r\u001b[K     |█████▉                          | 40 kB 30.6 MB/s eta 0:00:01\r\u001b[K     |███████▎                        | 51 kB 33.3 MB/s eta 0:00:01\r\u001b[K     |████████▊                       | 61 kB 36.6 MB/s eta 0:00:01\r\u001b[K     |██████████▏                     | 71 kB 30.0 MB/s eta 0:00:01\r\u001b[K     |███████████▋                    | 81 kB 29.3 MB/s eta 0:00:01\r\u001b[K     |█████████████                   | 92 kB 30.8 MB/s eta 0:00:01\r\u001b[K     |██████████████▌                 | 102 kB 28.4 MB/s eta 0:00:01\r\u001b[K     |████████████████                | 112 kB 28.4 MB/s eta 0:00:01\r\u001b[K     |█████████████████▍              | 122 kB 28.4 MB/s eta 0:00:01\r\u001b[K     |██████████████████▉             | 133 kB 28.4 MB/s eta 0:00:01\r\u001b[K     |████████████████████▎           | 143 kB 28.4 MB/s eta 0:00:01\r\u001b[K     |█████████████████████▊          | 153 kB 28.4 MB/s eta 0:00:01\r\u001b[K     |███████████████████████▏        | 163 kB 28.4 MB/s eta 0:00:01\r\u001b[K     |████████████████████████▋       | 174 kB 28.4 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████      | 184 kB 28.4 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▌    | 194 kB 28.4 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████   | 204 kB 28.4 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▍ | 215 kB 28.4 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▉| 225 kB 28.4 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 226 kB 28.4 MB/s \n","\u001b[?25hRequirement already satisfied: scipy>=0.19.0 in /usr/local/lib/python3.7/dist-packages (from neupy) (1.4.1)\n","Collecting graphviz==0.5.1\n","  Downloading graphviz-0.5.1-py2.py3-none-any.whl (14 kB)\n","Requirement already satisfied: matplotlib>=1.5.1 in /usr/local/lib/python3.7/dist-packages (from neupy) (3.2.2)\n","Requirement already satisfied: h5py in /usr/local/lib/python3.7/dist-packages (from neupy) (3.1.0)\n","Collecting progressbar2==3.34.3\n","  Downloading progressbar2-3.34.3-py2.py3-none-any.whl (25 kB)\n","Collecting tensorflow<1.14.0,>=1.10.1\n","  Downloading tensorflow-1.13.2-cp37-cp37m-manylinux1_x86_64.whl (92.7 MB)\n","\u001b[K     |████████████████████████████████| 92.7 MB 1.3 MB/s \n","\u001b[?25hRequirement already satisfied: numpy>=1.13.3 in /usr/local/lib/python3.7/dist-packages (from neupy) (1.19.5)\n","Requirement already satisfied: python-utils>=2.1.0 in /usr/local/lib/python3.7/dist-packages (from progressbar2==3.34.3->neupy) (2.5.6)\n","Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=1.5.1->neupy) (2.8.2)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=1.5.1->neupy) (0.11.0)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=1.5.1->neupy) (3.0.6)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=1.5.1->neupy) (1.3.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.1->matplotlib>=1.5.1->neupy) (1.15.0)\n","Collecting keras-applications>=1.0.6\n","  Downloading Keras_Applications-1.0.8-py3-none-any.whl (50 kB)\n","\u001b[K     |████████████████████████████████| 50 kB 6.0 MB/s \n","\u001b[?25hRequirement already satisfied: astor>=0.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow<1.14.0,>=1.10.1->neupy) (0.8.1)\n","Requirement already satisfied: gast>=0.2.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow<1.14.0,>=1.10.1->neupy) (0.4.0)\n","Requirement already satisfied: keras-preprocessing>=1.0.5 in /usr/local/lib/python3.7/dist-packages (from tensorflow<1.14.0,>=1.10.1->neupy) (1.1.2)\n","Requirement already satisfied: grpcio>=1.8.6 in /usr/local/lib/python3.7/dist-packages (from tensorflow<1.14.0,>=1.10.1->neupy) (1.42.0)\n","Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow<1.14.0,>=1.10.1->neupy) (1.1.0)\n","Requirement already satisfied: wheel>=0.26 in /usr/local/lib/python3.7/dist-packages (from tensorflow<1.14.0,>=1.10.1->neupy) (0.37.0)\n","Requirement already satisfied: absl-py>=0.1.6 in /usr/local/lib/python3.7/dist-packages (from tensorflow<1.14.0,>=1.10.1->neupy) (0.12.0)\n","Collecting tensorflow-estimator<1.14.0rc0,>=1.13.0\n","  Downloading tensorflow_estimator-1.13.0-py2.py3-none-any.whl (367 kB)\n","\u001b[K     |████████████████████████████████| 367 kB 55.0 MB/s \n","\u001b[?25hRequirement already satisfied: protobuf>=3.6.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow<1.14.0,>=1.10.1->neupy) (3.17.3)\n","Collecting tensorboard<1.14.0,>=1.13.0\n","  Downloading tensorboard-1.13.1-py3-none-any.whl (3.2 MB)\n","\u001b[K     |████████████████████████████████| 3.2 MB 14.6 MB/s \n","\u001b[?25hRequirement already satisfied: werkzeug>=0.11.15 in /usr/local/lib/python3.7/dist-packages (from tensorboard<1.14.0,>=1.13.0->tensorflow<1.14.0,>=1.10.1->neupy) (1.0.1)\n","Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.7/dist-packages (from tensorboard<1.14.0,>=1.13.0->tensorflow<1.14.0,>=1.10.1->neupy) (3.3.6)\n","Requirement already satisfied: importlib-metadata>=4.4 in /usr/local/lib/python3.7/dist-packages (from markdown>=2.6.8->tensorboard<1.14.0,>=1.13.0->tensorflow<1.14.0,>=1.10.1->neupy) (4.8.2)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata>=4.4->markdown>=2.6.8->tensorboard<1.14.0,>=1.13.0->tensorflow<1.14.0,>=1.10.1->neupy) (3.6.0)\n","Requirement already satisfied: typing-extensions>=3.6.4 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata>=4.4->markdown>=2.6.8->tensorboard<1.14.0,>=1.13.0->tensorflow<1.14.0,>=1.10.1->neupy) (3.10.0.2)\n","Collecting mock>=2.0.0\n","  Downloading mock-4.0.3-py3-none-any.whl (28 kB)\n","Requirement already satisfied: cached-property in /usr/local/lib/python3.7/dist-packages (from h5py->neupy) (1.5.2)\n","Installing collected packages: mock, tensorflow-estimator, tensorboard, keras-applications, tensorflow, progressbar2, graphviz, neupy\n","  Attempting uninstall: tensorflow-estimator\n","    Found existing installation: tensorflow-estimator 2.7.0\n","    Uninstalling tensorflow-estimator-2.7.0:\n","      Successfully uninstalled tensorflow-estimator-2.7.0\n","  Attempting uninstall: tensorboard\n","    Found existing installation: tensorboard 2.7.0\n","    Uninstalling tensorboard-2.7.0:\n","      Successfully uninstalled tensorboard-2.7.0\n","  Attempting uninstall: tensorflow\n","    Found existing installation: tensorflow 2.7.0\n","    Uninstalling tensorflow-2.7.0:\n","      Successfully uninstalled tensorflow-2.7.0\n","  Attempting uninstall: progressbar2\n","    Found existing installation: progressbar2 3.38.0\n","    Uninstalling progressbar2-3.38.0:\n","      Successfully uninstalled progressbar2-3.38.0\n","  Attempting uninstall: graphviz\n","    Found existing installation: graphviz 0.10.1\n","    Uninstalling graphviz-0.10.1:\n","      Successfully uninstalled graphviz-0.10.1\n","\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n","kapre 0.3.6 requires tensorflow>=2.0.0, but you have tensorflow 1.13.2 which is incompatible.\u001b[0m\n","Successfully installed graphviz-0.5.1 keras-applications-1.0.8 mock-4.0.3 neupy-0.8.2 progressbar2-3.34.3 tensorboard-1.13.1 tensorflow-1.13.2 tensorflow-estimator-1.13.0\n"]}]},{"cell_type":"code","source":["from neupy.layers import *\n","\n","# Number of features that we want\n","# to use during the training\n","n_inputs = 13\n","\n","# Number of outputs in the network. For the house price\n","# forecasting we want to predict single value per every\n","# input sample.\n","n_outputs = 1\n","\n","network = join(\n","    # This layer doesn't do any computation. It just\n","    # defines how many inputs network should expect.\n","    Input(n_inputs),\n","\n","    # Hidden layer. Number of neurons can be adjusted\n","    # in order to improve performance or deal with overfitting\n","    Sigmoid(50),\n","\n","    # Sigmoid outputs values between 0 and 1 and all\n","    # the prices that we want to predict has been rescaled\n","    # to the same range.\n","    Sigmoid(n_outputs),\n",")"],"metadata":{"id":"K3fi6OHaHDG_","executionInfo":{"status":"ok","timestamp":1640029206574,"user_tz":-60,"elapsed":11,"user":{"displayName":"Charles Oredola","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnpwCalP23D3Pr8M6WnJ42nMBIpm7KfjhgDPqn=s64","userId":"14286154376090524793"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["from neupy import algorithms\n","\n","optimizer = algorithms.LevenbergMarquardt(\n","    # First argument has to be neural network\n","    network,\n","\n","    # With this option enabled network shows its configuration\n","    # before the training and its progress during the training\n","    verbose=True,\n","\n","    # In order to avoid showing information about\n","    # network training progress after every epoch we can\n","    # do it less frequently, for example, every 5th epoch.\n","    show_epoch=5,\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FeTpwsYgHOdQ","executionInfo":{"status":"ok","timestamp":1640029217683,"user_tz":-60,"elapsed":1714,"user":{"displayName":"Charles Oredola","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnpwCalP23D3Pr8M6WnJ42nMBIpm7KfjhgDPqn=s64","userId":"14286154376090524793"}},"outputId":"c7cda2b2-6e0c-417c-8983-fbccd01f35b9"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Main information\n","\n","[ALGORITHM] LevenbergMarquardt\n","\r\n","[OPTION] loss = mse\n","[OPTION] mu = 0.01\n","[OPTION] mu_update_factor = 1.2\n","[OPTION] show_epoch = 5\n","[OPTION] shuffle_data = False\n","[OPTION] signals = None\n","[OPTION] target = Tensor(\"placeholder/target/sigmoid-4:0\", shape=(?, 1), dtype=float32)\n","[OPTION] verbose = True\n","\r\n","[TENSORFLOW] Initializing Tensorflow variables and functions.\n","WARNING:tensorflow:From /usr/local/lib/python3.7/dist-packages/tensorflow/python/framework/op_def_library.py:263: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Colocations handled automatically by placer.\n","[TENSORFLOW] Initialization finished successfully. It took 0.27 seconds\n"]}]},{"cell_type":"code","source":["optimizer.train(x_train, y_train, x_test, y_test, epochs=30)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zemCJHOLHhTU","executionInfo":{"status":"ok","timestamp":1640029291647,"user_tz":-60,"elapsed":5772,"user":{"displayName":"Charles Oredola","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnpwCalP23D3Pr8M6WnJ42nMBIpm7KfjhgDPqn=s64","userId":"14286154376090524793"}},"outputId":"167d9b83-cff3-4b98-8f67-53184e6e051e"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stderr","text":["\r                                                                               \r\r                                                                               \r\r                                                                               \r"]},{"output_type":"stream","name":"stdout","text":["#1 : [350 ms] train: 0.063064, valid: 0.027285\n"]},{"output_type":"stream","name":"stderr","text":["\r                                                                               \r\r                                                                               \r\r                                                                               \r"]},{"output_type":"stream","name":"stdout","text":["#5 : [89 ms] train: 0.009599, valid: 0.014010\n"]},{"output_type":"stream","name":"stderr","text":[""]},{"output_type":"stream","name":"stdout","text":["#10 : [93 ms] train: 0.005924, valid: 0.009924\n"]},{"output_type":"stream","name":"stderr","text":[""]},{"output_type":"stream","name":"stdout","text":["#15 : [107 ms] train: 0.004449, valid: 0.008825\n"]},{"output_type":"stream","name":"stderr","text":["\r                                                                               \r\r                                                                               \r\r                                                                               \r"]},{"output_type":"stream","name":"stdout","text":["#20 : [86 ms] train: 0.003718, valid: 0.009599\n"]},{"output_type":"stream","name":"stderr","text":[""]},{"output_type":"stream","name":"stdout","text":["#25 : [94 ms] train: 0.003221, valid: 0.008368\n"]},{"output_type":"stream","name":"stderr","text":["\r                                                                               \r\r                                                                               \r\r                                                                               \r"]},{"output_type":"stream","name":"stdout","text":["#30 : [105 ms] train: 0.002731, valid: 0.008291\n"]},{"output_type":"stream","name":"stderr","text":["\r                                                                               \r"]}]},{"cell_type":"code","source":["optimizer.plot_errors()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":497},"id":"R5lZEgxwHsrY","executionInfo":{"status":"ok","timestamp":1640029313424,"user_tz":-60,"elapsed":39,"user":{"displayName":"Charles Oredola","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnpwCalP23D3Pr8M6WnJ42nMBIpm7KfjhgDPqn=s64","userId":"14286154376090524793"}},"outputId":"da42466e-1fc6-46c4-ca7d-48f4b52f6f26"},"execution_count":15,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 864x576 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["import numpy as np\n","\n","def rmsle(expected, predicted):\n","    log_expected = np.log1p(expected + 1)\n","    log_predicted = np.log1p(predicted + 1)\n","    squared_log_error = np.square(log_expected - log_predicted)\n","    return np.sqrt(np.mean(squared_log_error))\n","\n","y_predict = optimizer.predict(x_test).round(1)\n","error = rmsle(\n","    target_scaler.inverse_transform(y_test),\n","    target_scaler.inverse_transform(y_predict),\n",")\n","print(error)  # ~0.18"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Emjd-fsQHsdY","executionInfo":{"status":"ok","timestamp":1640029331005,"user_tz":-60,"elapsed":4406,"user":{"displayName":"Charles Oredola","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnpwCalP23D3Pr8M6WnJ42nMBIpm7KfjhgDPqn=s64","userId":"14286154376090524793"}},"outputId":"bebba24b-c396-4aa8-a376-315735fa098d"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["0.17411477075295914\n"]},{"output_type":"stream","name":"stderr","text":["\r                                                                               \r"]}]}]}