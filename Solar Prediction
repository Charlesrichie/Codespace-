{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"nEpOSzEDggkp"},"outputs":[],"source":["# import necessary modules\n","import pandas as pd\n","import numpy as np\n","import io\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","%matplotlib inline"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":73,"resources":{"http://localhost:8080/nbextensions/google.colab/files.js":{"data":"Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7CgpmdW5jdGlvbiBfdXBsb2FkRmlsZXMoaW5wdXRJZCwgb3V0cHV0SWQpIHsKICBjb25zdCBzdGVwcyA9IHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCk7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICAvLyBDYWNoZSBzdGVwcyBvbiB0aGUgb3V0cHV0RWxlbWVudCB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIG5leHQgY2FsbAogIC8vIHRvIHVwbG9hZEZpbGVzQ29udGludWUgZnJvbSBQeXRob24uCiAgb3V0cHV0RWxlbWVudC5zdGVwcyA9IHN0ZXBzOwoKICByZXR1cm4gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpOwp9CgovLyBUaGlzIGlzIHJvdWdobHkgYW4gYXN5bmMgZ2VuZXJhdG9yIChub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIHlldCksCi8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBhc3luY2hyb25vdXMgc3RlcHMgYW5kIHRoZSBQeXRob24gc2lkZSBpcyBnb2luZwovLyB0byBwb2xsIGZvciBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcC4KLy8gVGhpcyB1c2VzIGEgUHJvbWlzZSB0byBibG9jayB0aGUgcHl0aG9uIHNpZGUgb24gY29tcGxldGlvbiBvZiBlYWNoIHN0ZXAsCi8vIHRoZW4gcGFzc2VzIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgYXMgdGhlIGlucHV0IHRvIHRoZSBuZXh0IHN0ZXAuCmZ1bmN0aW9uIF91cGxvYWRGaWxlc0NvbnRpbnVlKG91dHB1dElkKSB7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICBjb25zdCBzdGVwcyA9IG91dHB1dEVsZW1lbnQuc3RlcHM7CgogIGNvbnN0IG5leHQgPSBzdGVwcy5uZXh0KG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSk7CiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlLnByb21pc2UpLnRoZW4oKHZhbHVlKSA9PiB7CiAgICAvLyBDYWNoZSB0aGUgbGFzdCBwcm9taXNlIHZhbHVlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBuZXh0CiAgICAvLyBzdGVwIG9mIHRoZSBnZW5lcmF0b3IuCiAgICBvdXRwdXRFbGVtZW50Lmxhc3RQcm9taXNlVmFsdWUgPSB2YWx1ZTsKICAgIHJldHVybiBuZXh0LnZhbHVlLnJlc3BvbnNlOwogIH0pOwp9CgovKioKICogR2VuZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBiZXR3ZWVuIGVhY2ggYXN5bmMgc3RlcCBvZiB0aGUgdXBsb2FkCiAqIHByb2Nlc3MuCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIGlucHV0IGZpbGUgcGlja2VyIGVsZW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRJZCBFbGVtZW50IElEIG9mIHRoZSBvdXRwdXQgZGlzcGxheS4KICogQHJldHVybiB7IUl0ZXJhYmxlPCFPYmplY3Q+fSBJdGVyYWJsZSBvZiBuZXh0IHN0ZXBzLgogKi8KZnVuY3Rpb24qIHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogIGlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlOwoKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7CgogIGNvbnN0IHBpY2tlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgIHJlc29sdmUoZS50YXJnZXQuZmlsZXMpOwogICAgfSk7CiAgfSk7CgogIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNhbmNlbCk7CiAgY2FuY2VsLnRleHRDb250ZW50ID0gJ0NhbmNlbCB1cGxvYWQnOwogIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY2FuY2VsLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9OwogIH0pOwoKICAvLyBXYWl0IGZvciB0aGUgdXNlciB0byBwaWNrIHRoZSBmaWxlcy4KICBjb25zdCBmaWxlcyA9IHlpZWxkIHsKICAgIHByb21pc2U6IFByb21pc2UucmFjZShbcGlja2VkUHJvbWlzZSwgY2FuY2VsUHJvbWlzZV0pLAogICAgcmVzcG9uc2U6IHsKICAgICAgYWN0aW9uOiAnc3RhcnRpbmcnLAogICAgfQogIH07CgogIGNhbmNlbC5yZW1vdmUoKTsKCiAgLy8gRGlzYWJsZSB0aGUgaW5wdXQgZWxlbWVudCBzaW5jZSBmdXJ0aGVyIHBpY2tzIGFyZSBub3QgYWxsb3dlZC4KICBpbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlOwoKICBpZiAoIWZpbGVzKSB7CiAgICByZXR1cm4gewogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgICAgfQogICAgfTsKICB9CgogIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgbGkuYXBwZW5kKHNwYW4oZmlsZS5uYW1lLCB7Zm9udFdlaWdodDogJ2JvbGQnfSkpOwogICAgbGkuYXBwZW5kKHNwYW4oCiAgICAgICAgYCgke2ZpbGUudHlwZSB8fCAnbi9hJ30pIC0gJHtmaWxlLnNpemV9IGJ5dGVzLCBgICsKICAgICAgICBgbGFzdCBtb2RpZmllZDogJHsKICAgICAgICAgICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID8gZmlsZS5sYXN0TW9kaWZpZWREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24vYSd9IC0gYCkpOwogICAgY29uc3QgcGVyY2VudCA9IHNwYW4oJzAlIGRvbmUnKTsKICAgIGxpLmFwcGVuZENoaWxkKHBlcmNlbnQpOwoKICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQobGkpOwoKICAgIGNvbnN0IGZpbGVEYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgfSk7CiAgICAvLyBXYWl0IGZvciB0aGUgZGF0YSB0byBiZSByZWFkeS4KICAgIGxldCBmaWxlRGF0YSA9IHlpZWxkIHsKICAgICAgcHJvbWlzZTogZmlsZURhdGFQcm9taXNlLAogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbnRpbnVlJywKICAgICAgfQogICAgfTsKCiAgICAvLyBVc2UgYSBjaHVua2VkIHNlbmRpbmcgdG8gYXZvaWQgbWVzc2FnZSBzaXplIGxpbWl0cy4gU2VlIGIvNjIxMTU2NjAuCiAgICBsZXQgcG9zaXRpb24gPSAwOwogICAgZG8gewogICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbihmaWxlRGF0YS5ieXRlTGVuZ3RoIC0gcG9zaXRpb24sIE1BWF9QQVlMT0FEX1NJWkUpOwogICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGZpbGVEYXRhLCBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoOwoKICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgICAgIHlpZWxkIHsKICAgICAgICByZXNwb25zZTogewogICAgICAgICAgYWN0aW9uOiAnYXBwZW5kJywKICAgICAgICAgIGZpbGU6IGZpbGUubmFtZSwKICAgICAgICAgIGRhdGE6IGJhc2U2NCwKICAgICAgICB9LAogICAgICB9OwoKICAgICAgbGV0IHBlcmNlbnREb25lID0gZmlsZURhdGEuYnl0ZUxlbmd0aCA9PT0gMCA/CiAgICAgICAgICAxMDAgOgogICAgICAgICAgTWF0aC5yb3VuZCgocG9zaXRpb24gLyBmaWxlRGF0YS5ieXRlTGVuZ3RoKSAqIDEwMCk7CiAgICAgIHBlcmNlbnQudGV4dENvbnRlbnQgPSBgJHtwZXJjZW50RG9uZX0lIGRvbmVgOwoKICAgIH0gd2hpbGUgKHBvc2l0aW9uIDwgZmlsZURhdGEuYnl0ZUxlbmd0aCk7CiAgfQoKICAvLyBBbGwgZG9uZS4KICB5aWVsZCB7CiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICB9CiAgfTsKfQoKc2NvcGUuZ29vZ2xlID0gc2NvcGUuZ29vZ2xlIHx8IHt9OwpzY29wZS5nb29nbGUuY29sYWIgPSBzY29wZS5nb29nbGUuY29sYWIgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYi5fZmlsZXMgPSB7CiAgX3VwbG9hZEZpbGVzLAogIF91cGxvYWRGaWxlc0NvbnRpbnVlLAp9Owp9KShzZWxmKTsK","headers":[["content-type","application/javascript"]],"ok":true,"status":200,"status_text":""}}},"executionInfo":{"elapsed":97940,"status":"ok","timestamp":1642071102351,"user":{"displayName":"Charles Oredola","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnpwCalP23D3Pr8M6WnJ42nMBIpm7KfjhgDPqn=s64","userId":"14286154376090524793"},"user_tz":-60},"id":"1PsErsvWhOBO","outputId":"c05d4ad1-44ec-4390-ade6-35e6c8c33e5c"},"outputs":[{"output_type":"display_data","data":{"text/html":["\n","     <input type=\"file\" id=\"files-79e21132-84df-48ba-9a8c-d81519e6aaba\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-79e21132-84df-48ba-9a8c-d81519e6aaba\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script src=\"/nbextensions/google.colab/files.js\"></script> "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving South Africa.csv to South Africa.csv\n"]}],"source":["# import csv file to google colab\n","from google.colab import files\n","uploaded = files.upload()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":229},"executionInfo":{"elapsed":24,"status":"error","timestamp":1643625648139,"user":{"displayName":"Charles Oredola","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnpwCalP23D3Pr8M6WnJ42nMBIpm7KfjhgDPqn=s64","userId":"14286154376090524793"},"user_tz":-60},"id":"-vpG556Sh2rI","outputId":"98fe3c47-eb7d-4b7d-e413-bb6e1e718442"},"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-acf51aaaa791>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#read the csv file using pandas\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mio\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mBytesIO\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0muploaded\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'South Africa.csv'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;31m# Dataset is now stored in a Pandas Dataframe\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'pd' is not defined"]}],"source":["cc"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":330,"status":"ok","timestamp":1642071124563,"user":{"displayName":"Charles Oredola","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnpwCalP23D3Pr8M6WnJ42nMBIpm7KfjhgDPqn=s64","userId":"14286154376090524793"},"user_tz":-60},"id":"nBAZKifrjFLZ","outputId":"5a16662f-3417-4ce8-ee9d-28407d6c37df"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["YEAR           0\n","MO             0\n","DY             0\n","HR             0\n","T2M            0\n","T2MDEW         0\n","T2MWET         0\n","QV2M           0\n","RH2M           0\n","PRECTOTCORR    0\n","PS             0\n","WS10M          0\n","WS50M          0\n","WD50M          0\n","WD10M          0\n","dtype: int64"]},"metadata":{},"execution_count":5}],"source":["df.isnull().sum()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":9,"status":"ok","timestamp":1642071127076,"user":{"displayName":"Charles Oredola","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnpwCalP23D3Pr8M6WnJ42nMBIpm7KfjhgDPqn=s64","userId":"14286154376090524793"},"user_tz":-60},"id":"R9fPgVyuc8CQ","outputId":"c805def8-1b15-4647-82b1-66d234380444"},"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 87672 entries, 0 to 87671\n","Data columns (total 15 columns):\n"," #   Column       Non-Null Count  Dtype  \n","---  ------       --------------  -----  \n"," 0   YEAR         87672 non-null  int64  \n"," 1   MO           87672 non-null  int64  \n"," 2   DY           87672 non-null  int64  \n"," 3   HR           87672 non-null  int64  \n"," 4   T2M          87672 non-null  float64\n"," 5   T2MDEW       87672 non-null  float64\n"," 6   T2MWET       87672 non-null  float64\n"," 7   QV2M         87672 non-null  float64\n"," 8   RH2M         87672 non-null  float64\n"," 9   PRECTOTCORR  87672 non-null  float64\n"," 10  PS           87672 non-null  float64\n"," 11  WS10M        87672 non-null  float64\n"," 12  WS50M        87672 non-null  float64\n"," 13  WD50M        87672 non-null  float64\n"," 14  WD10M        87672 non-null  float64\n","dtypes: float64(11), int64(4)\n","memory usage: 10.0 MB\n"]}],"source":["df.info()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":348},"executionInfo":{"elapsed":327,"status":"ok","timestamp":1642071131588,"user":{"displayName":"Charles Oredola","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnpwCalP23D3Pr8M6WnJ42nMBIpm7KfjhgDPqn=s64","userId":"14286154376090524793"},"user_tz":-60},"id":"Fj4fp0kgdCY9","outputId":"05657750-e265-45bf-a05e-fe6335ff1663"},"outputs":[{"output_type":"execute_result","data":{"text/html":["\n","  <div id=\"df-21bc94de-90c4-4e5c-8404-f5c88d676ae0\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>YEAR</th>\n","      <th>MO</th>\n","      <th>DY</th>\n","      <th>HR</th>\n","      <th>T2M</th>\n","      <th>T2MDEW</th>\n","      <th>T2MWET</th>\n","      <th>QV2M</th>\n","      <th>RH2M</th>\n","      <th>PRECTOTCORR</th>\n","      <th>PS</th>\n","      <th>WS10M</th>\n","      <th>WS50M</th>\n","      <th>WD50M</th>\n","      <th>WD10M</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>87672.000000</td>\n","      <td>87672.000000</td>\n","      <td>87672.000000</td>\n","      <td>87672.000000</td>\n","      <td>87672.000000</td>\n","      <td>87672.000000</td>\n","      <td>87672.000000</td>\n","      <td>87672.000000</td>\n","      <td>87672.000000</td>\n","      <td>87672.000000</td>\n","      <td>87672.000000</td>\n","      <td>87672.000000</td>\n","      <td>87672.000000</td>\n","      <td>87672.000000</td>\n","      <td>87672.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>2015.500411</td>\n","      <td>6.522310</td>\n","      <td>15.731454</td>\n","      <td>11.500000</td>\n","      <td>22.269231</td>\n","      <td>3.370144</td>\n","      <td>12.819690</td>\n","      <td>5.196468</td>\n","      <td>34.159391</td>\n","      <td>0.000511</td>\n","      <td>98.376327</td>\n","      <td>4.243961</td>\n","      <td>6.141301</td>\n","      <td>202.877547</td>\n","      <td>203.038936</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>2.872679</td>\n","      <td>3.448893</td>\n","      <td>8.800909</td>\n","      <td>6.922226</td>\n","      <td>9.138711</td>\n","      <td>5.055674</td>\n","      <td>5.818283</td>\n","      <td>1.759012</td>\n","      <td>19.302462</td>\n","      <td>0.042609</td>\n","      <td>0.457288</td>\n","      <td>1.635507</td>\n","      <td>2.101722</td>\n","      <td>146.078167</td>\n","      <td>146.158650</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>2011.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>0.030000</td>\n","      <td>-15.630000</td>\n","      <td>-4.930000</td>\n","      <td>0.920000</td>\n","      <td>2.500000</td>\n","      <td>0.000000</td>\n","      <td>97.020000</td>\n","      <td>0.030000</td>\n","      <td>0.030000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>2013.000000</td>\n","      <td>4.000000</td>\n","      <td>8.000000</td>\n","      <td>5.750000</td>\n","      <td>15.130000</td>\n","      <td>0.050000</td>\n","      <td>8.210000</td>\n","      <td>3.850000</td>\n","      <td>19.440000</td>\n","      <td>0.000000</td>\n","      <td>98.020000</td>\n","      <td>3.190000</td>\n","      <td>4.750000</td>\n","      <td>29.740000</td>\n","      <td>29.570000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>2016.000000</td>\n","      <td>7.000000</td>\n","      <td>16.000000</td>\n","      <td>11.500000</td>\n","      <td>22.540000</td>\n","      <td>3.980000</td>\n","      <td>13.080000</td>\n","      <td>5.130000</td>\n","      <td>29.750000</td>\n","      <td>0.000000</td>\n","      <td>98.340000</td>\n","      <td>3.930000</td>\n","      <td>6.305000</td>\n","      <td>290.755000</td>\n","      <td>290.970000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>2018.000000</td>\n","      <td>10.000000</td>\n","      <td>23.000000</td>\n","      <td>17.250000</td>\n","      <td>28.900000</td>\n","      <td>7.080000</td>\n","      <td>17.410000</td>\n","      <td>6.410000</td>\n","      <td>44.000000</td>\n","      <td>0.000000</td>\n","      <td>98.690000</td>\n","      <td>5.180000</td>\n","      <td>7.660000</td>\n","      <td>338.312500</td>\n","      <td>338.480000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>2020.000000</td>\n","      <td>12.000000</td>\n","      <td>31.000000</td>\n","      <td>23.000000</td>\n","      <td>45.570000</td>\n","      <td>18.790000</td>\n","      <td>27.130000</td>\n","      <td>13.790000</td>\n","      <td>100.000000</td>\n","      <td>7.350000</td>\n","      <td>100.010000</td>\n","      <td>14.240000</td>\n","      <td>16.590000</td>\n","      <td>359.960000</td>\n","      <td>359.940000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-21bc94de-90c4-4e5c-8404-f5c88d676ae0')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-21bc94de-90c4-4e5c-8404-f5c88d676ae0 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-21bc94de-90c4-4e5c-8404-f5c88d676ae0');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["               YEAR            MO  ...         WD50M         WD10M\n","count  87672.000000  87672.000000  ...  87672.000000  87672.000000\n","mean    2015.500411      6.522310  ...    202.877547    203.038936\n","std        2.872679      3.448893  ...    146.078167    146.158650\n","min     2011.000000      1.000000  ...      0.000000      0.000000\n","25%     2013.000000      4.000000  ...     29.740000     29.570000\n","50%     2016.000000      7.000000  ...    290.755000    290.970000\n","75%     2018.000000     10.000000  ...    338.312500    338.480000\n","max     2020.000000     12.000000  ...    359.960000    359.940000\n","\n","[8 rows x 15 columns]"]},"metadata":{},"execution_count":7}],"source":["df.describe()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":618},"executionInfo":{"elapsed":944,"status":"ok","timestamp":1642071136604,"user":{"displayName":"Charles Oredola","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnpwCalP23D3Pr8M6WnJ42nMBIpm7KfjhgDPqn=s64","userId":"14286154376090524793"},"user_tz":-60},"id":"Dg_6mGYhBxUV","outputId":"47848993-2732-4125-9aba-8e70f1f45014"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fb9465fcfd0>"]},"metadata":{},"execution_count":8},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 792x648 with 2 Axes>"]},"metadata":{}}],"source":["# use the pands .corr() function to compute pairwise correlations for the dataframe\n","corr = df.corr()\n","# visualise the data with seaborn\n","mask = np.triu(np.ones_like(corr, dtype=np.bool))\n","sns.set_style(style = 'white')\n","f, ax = plt.subplots(figsize=(11, 9))\n","cmap = sns.diverging_palette(10, 250, as_cmap=True)\n","sns.heatmap(corr, mask=mask, cmap=cmap, \n","        square=True,\n","        linewidths=.5, cbar_kws={\"shrink\": .5}, ax=ax)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8V2hBK_ZrG3q"},"outputs":[],"source":["# Dropping PRECTOTCORR from the dataset\n","df.drop(['PRECTOTCORR'], axis = 1, inplace = True)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":195},"executionInfo":{"elapsed":335,"status":"ok","timestamp":1642071165027,"user":{"displayName":"Charles Oredola","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnpwCalP23D3Pr8M6WnJ42nMBIpm7KfjhgDPqn=s64","userId":"14286154376090524793"},"user_tz":-60},"id":"CuuxGOnMroRD","outputId":"0ca7dd01-3e26-49d0-fdb3-b09421ca53bc"},"outputs":[{"output_type":"execute_result","data":{"text/html":["\n","  <div id=\"df-7d8dc2a9-6cab-4d5a-8f52-1fc14e609d38\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>YEAR</th>\n","      <th>MO</th>\n","      <th>DY</th>\n","      <th>HR</th>\n","      <th>T2M</th>\n","      <th>T2MDEW</th>\n","      <th>T2MWET</th>\n","      <th>QV2M</th>\n","      <th>RH2M</th>\n","      <th>PS</th>\n","      <th>WS10M</th>\n","      <th>WS50M</th>\n","      <th>WD50M</th>\n","      <th>WD10M</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2011</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>9.99</td>\n","      <td>5.19</td>\n","      <td>7.59</td>\n","      <td>5.55</td>\n","      <td>71.94</td>\n","      <td>98.89</td>\n","      <td>2.97</td>\n","      <td>5.85</td>\n","      <td>14.05</td>\n","      <td>14.29</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2011</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>9.39</td>\n","      <td>5.30</td>\n","      <td>7.34</td>\n","      <td>5.62</td>\n","      <td>75.44</td>\n","      <td>98.86</td>\n","      <td>2.84</td>\n","      <td>5.52</td>\n","      <td>20.02</td>\n","      <td>20.13</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2011</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>8.55</td>\n","      <td>5.28</td>\n","      <td>6.92</td>\n","      <td>5.62</td>\n","      <td>79.75</td>\n","      <td>98.87</td>\n","      <td>2.96</td>\n","      <td>5.79</td>\n","      <td>10.26</td>\n","      <td>10.18</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2011</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>8.33</td>\n","      <td>5.26</td>\n","      <td>6.80</td>\n","      <td>5.62</td>\n","      <td>80.88</td>\n","      <td>98.85</td>\n","      <td>2.78</td>\n","      <td>5.22</td>\n","      <td>14.39</td>\n","      <td>14.31</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2011</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>4</td>\n","      <td>7.83</td>\n","      <td>5.23</td>\n","      <td>6.53</td>\n","      <td>5.62</td>\n","      <td>83.50</td>\n","      <td>98.86</td>\n","      <td>2.72</td>\n","      <td>4.79</td>\n","      <td>17.87</td>\n","      <td>17.71</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7d8dc2a9-6cab-4d5a-8f52-1fc14e609d38')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-7d8dc2a9-6cab-4d5a-8f52-1fc14e609d38 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-7d8dc2a9-6cab-4d5a-8f52-1fc14e609d38');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["   YEAR  MO  DY  HR   T2M  T2MDEW  ...   RH2M     PS  WS10M  WS50M  WD50M  WD10M\n","0  2011   1   1   0  9.99    5.19  ...  71.94  98.89   2.97   5.85  14.05  14.29\n","1  2011   1   1   1  9.39    5.30  ...  75.44  98.86   2.84   5.52  20.02  20.13\n","2  2011   1   1   2  8.55    5.28  ...  79.75  98.87   2.96   5.79  10.26  10.18\n","3  2011   1   1   3  8.33    5.26  ...  80.88  98.85   2.78   5.22  14.39  14.31\n","4  2011   1   1   4  7.83    5.23  ...  83.50  98.86   2.72   4.79  17.87  17.71\n","\n","[5 rows x 14 columns]"]},"metadata":{},"execution_count":11}],"source":["df.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QL_decXYmPXt"},"outputs":[],"source":["# Important Machine Learning modules\n","from sklearn.metrics import accuracy_score, mean_squared_error, r2_score\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LinearRegression"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"eZAsDZ6SG__Z"},"outputs":[],"source":["#Prepare the training set\n","\n","# X = feature values, all the columns except the last column\n","X = df.iloc[:, 7: 14]\n","\n","# y = target values, last column of the data frame\n","y = df.iloc[:, 4: 7]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":320,"status":"ok","timestamp":1642071180544,"user":{"displayName":"Charles Oredola","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnpwCalP23D3Pr8M6WnJ42nMBIpm7KfjhgDPqn=s64","userId":"14286154376090524793"},"user_tz":-60},"id":"zOBBT_ujKhYl","outputId":"9de69579-9043-4c79-8189-5e13186e5f7f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['QV2M', 'RH2M', 'PS', 'WS10M', 'WS50M', 'WD50M', 'WD10M'], dtype='object')"]},"metadata":{},"execution_count":13}],"source":["X.columns"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":12,"status":"ok","timestamp":1642071181677,"user":{"displayName":"Charles Oredola","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnpwCalP23D3Pr8M6WnJ42nMBIpm7KfjhgDPqn=s64","userId":"14286154376090524793"},"user_tz":-60},"id":"bS8T-MebKnZP","outputId":"fc869ce6-9957-414a-e056-5ef8fb82238c"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['T2M', 'T2MDEW', 'T2MWET'], dtype='object')"]},"metadata":{},"execution_count":14}],"source":["y.columns"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":402},"executionInfo":{"elapsed":14,"status":"ok","timestamp":1642071182620,"user":{"displayName":"Charles Oredola","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnpwCalP23D3Pr8M6WnJ42nMBIpm7KfjhgDPqn=s64","userId":"14286154376090524793"},"user_tz":-60},"id":"FlpcI9Ebsvjx","outputId":"1949cc08-1032-4045-b6ee-53e53445d765"},"outputs":[{"output_type":"execute_result","data":{"text/html":["\n","  <div id=\"df-46524b65-2a18-4965-96f0-ced13a2292f3\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>QV2M</th>\n","      <th>RH2M</th>\n","      <th>PS</th>\n","      <th>WS10M</th>\n","      <th>WS50M</th>\n","      <th>WD50M</th>\n","      <th>WD10M</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>5.55</td>\n","      <td>71.94</td>\n","      <td>98.89</td>\n","      <td>2.97</td>\n","      <td>5.85</td>\n","      <td>14.05</td>\n","      <td>14.29</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>5.62</td>\n","      <td>75.44</td>\n","      <td>98.86</td>\n","      <td>2.84</td>\n","      <td>5.52</td>\n","      <td>20.02</td>\n","      <td>20.13</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>5.62</td>\n","      <td>79.75</td>\n","      <td>98.87</td>\n","      <td>2.96</td>\n","      <td>5.79</td>\n","      <td>10.26</td>\n","      <td>10.18</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>5.62</td>\n","      <td>80.88</td>\n","      <td>98.85</td>\n","      <td>2.78</td>\n","      <td>5.22</td>\n","      <td>14.39</td>\n","      <td>14.31</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5.62</td>\n","      <td>83.50</td>\n","      <td>98.86</td>\n","      <td>2.72</td>\n","      <td>4.79</td>\n","      <td>17.87</td>\n","      <td>17.71</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>87667</th>\n","      <td>4.27</td>\n","      <td>48.12</td>\n","      <td>98.72</td>\n","      <td>3.67</td>\n","      <td>6.89</td>\n","      <td>355.12</td>\n","      <td>355.11</td>\n","    </tr>\n","    <tr>\n","      <th>87668</th>\n","      <td>4.39</td>\n","      <td>52.81</td>\n","      <td>98.74</td>\n","      <td>3.56</td>\n","      <td>6.51</td>\n","      <td>357.39</td>\n","      <td>357.48</td>\n","    </tr>\n","    <tr>\n","      <th>87669</th>\n","      <td>4.52</td>\n","      <td>57.44</td>\n","      <td>98.75</td>\n","      <td>3.42</td>\n","      <td>6.05</td>\n","      <td>357.19</td>\n","      <td>357.25</td>\n","    </tr>\n","    <tr>\n","      <th>87670</th>\n","      <td>4.70</td>\n","      <td>62.00</td>\n","      <td>98.73</td>\n","      <td>3.33</td>\n","      <td>5.82</td>\n","      <td>356.46</td>\n","      <td>356.50</td>\n","    </tr>\n","    <tr>\n","      <th>87671</th>\n","      <td>4.82</td>\n","      <td>66.69</td>\n","      <td>98.70</td>\n","      <td>3.27</td>\n","      <td>5.70</td>\n","      <td>359.84</td>\n","      <td>0.00</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>87672 rows × 7 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-46524b65-2a18-4965-96f0-ced13a2292f3')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-46524b65-2a18-4965-96f0-ced13a2292f3 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-46524b65-2a18-4965-96f0-ced13a2292f3');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["       QV2M   RH2M     PS  WS10M  WS50M   WD50M   WD10M\n","0      5.55  71.94  98.89   2.97   5.85   14.05   14.29\n","1      5.62  75.44  98.86   2.84   5.52   20.02   20.13\n","2      5.62  79.75  98.87   2.96   5.79   10.26   10.18\n","3      5.62  80.88  98.85   2.78   5.22   14.39   14.31\n","4      5.62  83.50  98.86   2.72   4.79   17.87   17.71\n","...     ...    ...    ...    ...    ...     ...     ...\n","87667  4.27  48.12  98.72   3.67   6.89  355.12  355.11\n","87668  4.39  52.81  98.74   3.56   6.51  357.39  357.48\n","87669  4.52  57.44  98.75   3.42   6.05  357.19  357.25\n","87670  4.70  62.00  98.73   3.33   5.82  356.46  356.50\n","87671  4.82  66.69  98.70   3.27   5.70  359.84    0.00\n","\n","[87672 rows x 7 columns]"]},"metadata":{},"execution_count":15}],"source":["X"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":402},"executionInfo":{"elapsed":390,"status":"ok","timestamp":1642071193451,"user":{"displayName":"Charles Oredola","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnpwCalP23D3Pr8M6WnJ42nMBIpm7KfjhgDPqn=s64","userId":"14286154376090524793"},"user_tz":-60},"id":"2teIeQmQsIit","outputId":"5f454b17-30b1-47b1-e78f-00df5dc2a123"},"outputs":[{"output_type":"execute_result","data":{"text/html":["\n","  <div id=\"df-6168578c-ffce-47de-b939-6fb1c48a4b7f\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>T2M</th>\n","      <th>T2MDEW</th>\n","      <th>T2MWET</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>9.99</td>\n","      <td>5.19</td>\n","      <td>7.59</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>9.39</td>\n","      <td>5.30</td>\n","      <td>7.34</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>8.55</td>\n","      <td>5.28</td>\n","      <td>6.92</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>8.33</td>\n","      <td>5.26</td>\n","      <td>6.80</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>7.83</td>\n","      <td>5.23</td>\n","      <td>6.53</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>87667</th>\n","      <td>11.93</td>\n","      <td>1.33</td>\n","      <td>6.63</td>\n","    </tr>\n","    <tr>\n","      <th>87668</th>\n","      <td>11.07</td>\n","      <td>1.83</td>\n","      <td>6.44</td>\n","    </tr>\n","    <tr>\n","      <th>87669</th>\n","      <td>10.29</td>\n","      <td>2.27</td>\n","      <td>6.28</td>\n","    </tr>\n","    <tr>\n","      <th>87670</th>\n","      <td>9.60</td>\n","      <td>2.69</td>\n","      <td>6.15</td>\n","    </tr>\n","    <tr>\n","      <th>87671</th>\n","      <td>8.97</td>\n","      <td>3.13</td>\n","      <td>6.05</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>87672 rows × 3 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6168578c-ffce-47de-b939-6fb1c48a4b7f')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-6168578c-ffce-47de-b939-6fb1c48a4b7f button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-6168578c-ffce-47de-b939-6fb1c48a4b7f');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["         T2M  T2MDEW  T2MWET\n","0       9.99    5.19    7.59\n","1       9.39    5.30    7.34\n","2       8.55    5.28    6.92\n","3       8.33    5.26    6.80\n","4       7.83    5.23    6.53\n","...      ...     ...     ...\n","87667  11.93    1.33    6.63\n","87668  11.07    1.83    6.44\n","87669  10.29    2.27    6.28\n","87670   9.60    2.69    6.15\n","87671   8.97    3.13    6.05\n","\n","[87672 rows x 3 columns]"]},"metadata":{},"execution_count":16}],"source":["y"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mX2unm_5quJG"},"outputs":[],"source":["# Splitting the dataset into trainingset and testset\n","X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=42)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":349,"status":"ok","timestamp":1642071202709,"user":{"displayName":"Charles Oredola","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnpwCalP23D3Pr8M6WnJ42nMBIpm7KfjhgDPqn=s64","userId":"14286154376090524793"},"user_tz":-60},"id":"0skEJH7rIwMp","outputId":"3c03e3f8-fb4e-4047-c6d4-1ab7599cb2d3"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["LinearRegression()"]},"metadata":{},"execution_count":18}],"source":["# The training algorithm\n","model = LinearRegression()\n","model.fit(X_train, y_train)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Rm3N_ld_I0a0"},"outputs":[],"source":["# Making predictions\n","predictions = model.predict(X_test)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":308,"status":"ok","timestamp":1642071210797,"user":{"displayName":"Charles Oredola","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnpwCalP23D3Pr8M6WnJ42nMBIpm7KfjhgDPqn=s64","userId":"14286154376090524793"},"user_tz":-60},"id":"sCgK789iPdql","outputId":"6963706a-927a-4ab4-815a-a5f8e405bfb7"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[28.57997602,  9.12632169, 18.85317562],\n","       [27.26563081,  8.14579865, 17.70576177],\n","       [23.25053491, -4.82426255,  9.21316151],\n","       ...,\n","       [26.60380842,  6.53190387, 16.56775031],\n","       [36.34755025,  8.31782504, 22.33260398],\n","       [27.07951361,  3.80344154, 15.44155645]])"]},"metadata":{},"execution_count":20}],"source":["predictions"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":1791,"status":"ok","timestamp":1642071215990,"user":{"displayName":"Charles Oredola","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnpwCalP23D3Pr8M6WnJ42nMBIpm7KfjhgDPqn=s64","userId":"14286154376090524793"},"user_tz":-60},"id":"0pjJzlcIHH5K","outputId":"dd1cfbfe-38a0-4de8-d391-029eafd9a03d"},"outputs":[{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAA6oAAARtCAYAAABcNricAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nOzdf2xd5X0/8De9tpN1saGsgQoalraRqEljDAnQutLUX+pWAuXHVA0bIhBpo05CqgbKyNpoVQeL2EAt5VttVUVap1mTtVT8aBeJSfSPghryg4EJiRwaOtKqlaAlQBM38XJj8v0jwyPYOLZj+z6+fr2kKL6fc339POfec+953+c555xy9OjRowEAAIBCvK3WDQAAAIA3ElQBAAAoiqAKAABAUQRVAAAAiiKoAgAAUBRBFQAAgKIIqgAAABSlodYNgHp2wQUXDP586NChNDU1pVKpJEm+8pWvZGBgIOvXr8/evXszZ86cXHbZZbn55pvT0HBs0/zYxz6W3/72t3n00Udz+umnDz7WlVdemd7e3vzkJz/Ju9/97qntFADUian6nF61alX+4z/+I42NjUmSs88+Ox/96EezYsWKNDc3J0nuv//+fOlLX8rs2bOPa+PDDz+cBx98MNu3b8+99947WP/kJz+Zc845Z0jtC1/4QpYuXTrBawqmnhFVmERPPfXU4L+zzjor3/zmNwdvf/rTn86hQ4fyxS9+MVu2bMl9992XLVu25Nvf/vZxj3H22Wdn06ZNg7efffbZHDp0aKq7AgB1Zyo/p5cvX56nnnoqW7ZsyZo1a9LT05POzs4cPHhw8D7t7e3Htempp57KmWeemSVLluSpp57KwMBAkuS3v/1tjhw5kt7e3uNqv/zlL7NkyZLJWFUw5QRVqKGurq4sWbIkTU1NOfPMM3P55ZfnySefPO4+V1xxRR588MHB2w8++GCuvPLKqW4qAMw4k/E5PWvWrLS1teVf//Vf8+qrr+b+++8/YTsWLVo0GEyT5Iknnsgll1yS97znPcfVzjnnnJx55pnj6SoUR1CFgmzfvj0LFiw4rtbe3p6+vr784he/yMDAQDZt2pRPf/rTNWohAMxcE/k5PWfOnHR0dOSJJ5444X2bmprS1tY2eN8nnngiixcvzuLFi4+rGU2lngiqUIgf/vCH2blzZ2688cYhy17/tvZnP/tZ3ve+9/m2FACm2GR8Tp9xxhn5/e9/P3j76aefzpIlSwb/feITnxhcdvHFF2f79u1J/i+ULl68+LjaxRdffDJdhKI4mRIU4JFHHslXv/rVfOc73znuZAyvu+KKK3Ldddfl17/+da644ooatBAAZq7J+px+8cUXc+qppw7ePv/887Nx48Zh77tkyZJ873vfy6uvvpqXX3458+fPzzvf+c6sWrUqr776avbs2WNElbpiRBVq7NFHH83q1avzzW9+M+eee+6w9zn77LPz7ne/Oz/96U/zyU9+copbCAAz12R9Tv/hD3/I448/PupwecEFF6Svry8/+MEPcuGFFyY5Nn34jDPOyA9+8IOcccYZmTdv3ug6BdOAEVWooccffzwrV67MN77xjbS1tY1433/8x3/M73//+7z97W/PkSNHpqiFADBzTcbn9OHDh/Pzn/88d911V1paWnL11VePqi2zZ8/OBz7wgXR3d+fzn//8YH3x4sXp7u7Ohz70odF1CqYJQRVq6F/+5V9y4MCBrFixYrC2ePHi466J9rpzzjlnKpsGADPeRH5Or127Nt/97neTJGeddVY+8pGP5J577snb3/72wfv09PQcd23XJFm3bt1gSL7ooovy1FNPZfHixce159/+7d9y0UUXjb2DULBTjh49erTWjQAAAIDXOUYVAACAogiqAAAAFEVQBQAAoCiCKgAAAEURVAEAAChKMZenueSSS3L22WeP6XcOHz6cpqamSWpRfbPuTo71N37W3cmZCevvN7/5TbZu3VrrZjCBxvMZPxb1tl3oT9n0p2z11J966ktyrD+/+93vRv0ZX0xQPfvss3P//feP6Xd6e3vT2to6SS2qb9bdybH+xs+6OzkzYf1dffXVtW4CE2w8n/FjUW/bhf6UTX/KVk/9qae+JMf686UvfWnU9zf1FwAAgKIIqgAAABRFUAUAAKAogioAAABFEVQBAAAoiqAKAABAUQRVAAAAiiKoAgAAUBRBFQAAgKIIqgAAABRFUAUAAKAogioAAABFEVQBAAAoiqAKAABAUQRVAAAAiiKoAgAAUBRBFQAAgKIIqgAAABRFUAUAAKAogioAAABFEVRhmuivDoxrGQAw84x3v8H+BqVoqHUDgNGZ3VjJ/FWbhl22946lU9waAKBk491vsL9BKYyoAgAAUBRBFQAAgKIIqgAAABRFUAUAAKAogioAAABFOWFQffHFF3PVVVdl0aJFOXLkSJJkzZo16erqyu233z54v9HWAACA2nnjZWZaW1tr2BJ4aycMqqeddlq6u7vT3t6eJNm1a1cOHjyYDRs2pFqtZseOHaOuAQAAtfX6JWiG+welOOF1VGfNmpVZs2YN3u7p6UlHR0eSpKOjIz09PalUKqOqtbW1TUYfAAAAqCMnDKpvduDAgcybNy9J0tzcnD179qShoWFUtZEcPnw4vb29Y2pLf3//mH+HY6y7k1OL9XeiqTnT5fn02js51h8AMBOMOag2Nzenr68vSdLX15eWlpZUKpVR1UbS1NQ05jnyvb295tWPk3V3ckpcf6W1562UuO6mE+sPAJgJxnzW3/b29mzZsiVJsnnz5rS3t4+6BgAAACdywqBarVZzww03ZPfu3Vm+fHmOHDmSpqamdHV1pVKppK2tLQsXLhxVDQAAAE7khFN/Gxsb093dfVzt/PPPH3K/1atXj6oGAAAAIxnz1F8AAACYTIIqFOSNF+AGAICZasxn/QUmz+sX4B7O3juWTnFrAACgNoyoAgAAUBRBFerASFOGTScGAGC6MfUX6sBIU4Z33/YXI/5uf3Ugsxsrk9EsAAAYF0EV6txIITZx7CsAAOUx9RcAZqgXX3wxV111VRYtWpQjR44M1ru7u9PZ2Tl4e82aNenq6srtt98+Yg0AJoqgCgAz1GmnnZbu7u60t7cP1g4fPpze3t7B27t27crBgwezYcOGVKvV7NixY9gaAEwkQRUAZqhZs2bl1FNPPa5233335corrxy83dPTk46OjiRJR0dHenp6hq0BwERyjCoAkCSpVqvZtm1brr322txzzz1JkgMHDmTevHlJkubm5uzZsycNDQ1DaiN58yjtROvv75/Ux59q+lO26dKf1tbWSXnc0vs+XZ6f0ainviTH+jMWgioAkCR56KGHcvnllx9Xa25uTl9fX5Kkr68vLS0tqVQqQ2ojaWpqmrSd5uTYjvNkPv5U05+y1Vt/xqK/OvCWfS/lKgL19PzUU1+SsX/JIagCAEmS559/Prt3787GjRvz3HPPZf369bnwwgvz/e9/P5deemk2b96cq6++OpVKZUgNqH8jXUnAVQSYaI5RBYAZqlqt5oYbbsju3buzfPnyfPKTn8zatWuzdu3aLFiwIMuWLcvChQvT1NSUrq6uVCqVtLW1DVsDgIlkRBUAZqjGxsZ0d3cPu2zjxo2DP69evXrI8uFqwMw10tTfUqYFM70IqgAAwEkxLZiJZuovAAAARRFUAQAAKIqgCgAAQFEEVQAAAIoiqAIAAFAUQRUAAICiCKoAAAAURVAFAACgKIIqAAAARRFUAQAAKIqgCgAAQFEEVQAAAIoiqAIAAFAUQRUAAICiCKoAAAAURVAFAACgKIIqAAAARRFUAQAAKIqgCgAAQFEEVQAAAIoiqAIAAFAUQRUAAICiCKoww/VXB8a1DAAAJktDrRsA1Nbsxkrmr9o07LK9dyyd4tYAAIARVQAAAAojqAIAAFAUQRUAAArlXBLMVI5RBQCAQjmXBDOVEVUAAGDSGBVmPIyoAgDANNRfHcjsxkqtm3FCRoUZD0EVAACmIQGQembqLwAAAEURVAEAACiKoAoAAEBRBFUAAACKIqgCAABQFEEVAACAogiqAAAAFEVQBQAAoCiCKkyx/upArZsAAABFa6h1A2Cmmd1YyfxVm4ZdtveOpVPcGgAAKI8RVQAAAIoiqAIAAFAUQRUAAICiCKrAWxrpxE9OCgUAwGRxMiXgLTnxEwAAtWBEFQAAgKIIqgAAABRFUAUAAKAogioAAABFEVQBAKCGnEkfhnLWXwAAqCFn2YehjKgCwAz14osv5qqrrsqiRYty5MiRPP3007nmmmvS2dmZNWvWDN7v3nvvTWdnZ2655ZZUq9W3rAHARBFUAWCGOu2009Ld3Z329vYkyVlnnZV169Zl48aN2bdvX5599tns27cvW7duzcaNG3PuuefmkUceGbYGABNJUAWAGWrWrFk59dRTB2/PnTs3s2bNSpI0NjamUqlk586dufjii5MkHR0d6enpGbYGABPJMaoAwHF2796dl19+OQsWLEhvb2/mzJmTJGlubs7+/fuzf//+IbWRHD58OL29vZPW3v7+/kl9/KmmP2WbjP60trZO6ONNNxO5Puvp9VZPfUmO9WcsBFUAYNCrr76a2267LXfffXeSY0H0hRdeSJL09fWlpaVl2NpImpqaJnVHvLe3t6529PWnbPXWnxJM5Pqsp+ennvqSjP0LCVN/AYAkyZEjR7Jy5crceuutmTt3bpJk0aJF2b59e5Jk8+bNOf/884etAcBEMqIKADNUtVrN5z73uezevTvLly/PRRddlGeeeSZ33nlnkuTmm2/OBRdckCVLlqSzszNnnXVWrr/++jQ1NQ2pAcBEElQBYIZqbGxMd3f3cbWbbrppyP1WrFiRFStWnLAGABPF1F8YQX91YNh6a2vrWy4DAABOjhFVGMHsxkrmr9o07LLdt/3FW/5ef3Ugsxsrk9UsAACoa4IqjNNIIXbvHUunuDUAAFA/TP0FAACgKOMaUT106FC+8IUv5NChQ5kzZ06+/vWv56677srOnTtz3nnnZfXq1UmSNWvWDKlBaUzTBQCAsoxrRPWxxx5LW1tb1q9fn7a2tnzrW9/KwYMHs2HDhlSr1ezYsSO7du0aUoMSvT6Fd7h/AADA1BtXUD3nnHNy6NChJMn+/fuTJB0dHYP/9/T0pKenZ0gNAAAATmRcU3//9E//ND09PVm6dGlOP/30fPjDH86cOXOSJM3NzdmzZ08aGhoyb96842ojOXz4cHp7e8fUjv7+/jH/DsdYd/+ntbV1Uh73rdbvZP29WhjPa8hr7+RYfwDATDCuoPrAAw/kox/9aD772c9m7dq1OXToUPr6+pIkfX19aWlpSaVSGVIbSVNT05h34Ht7e+tqp38qWXeTq786MCPW73j66LV3cqw/AGAmGFdQPXr0aE499dQkyTve8Y4cOnQoW7ZsyaWXXprNmzfn6quvTqVSyfe///3jajBTuHQNAACM37iOUb388svz8MMPZ9myZfnxj3+c6667Lk1NTenq6kqlUklbW1sWLlw4pAYAAAAnMq4R1ZaWlqxdu/a42nCXn3FJGgAAAMZqXCOqAAAAMFkEVQAAAIoiqAIAwCTrrw7UugkwrYzrGFUAAGD0XBEAxsaIKgAAAEURVAEAACiKoAoAAEBRBFUAAACKIqgCAABQFEEVAACAogiqAAAAFEVQBQAAoCiCKgAAAEURVAEAACiKoAoAAEBRBFVmhP7qQK2bAAAAjFJDrRsAU2F2YyXzV20adtneO5ZOcWsAAICRGFEFAACgKIIqAAAARRFUAQAAKIqgCgAAQFEEVQAAAIoiqAIAAFAUQRUAAICiCKoAAAAURVBlWumvDoxrGQAAMH001LoBMBazGyuZv2rTsMv23rF0ilsDAABMBiOqAAAAFEVQBQAAoCiCKgAAAEURVAEAACiKoAoAAEBRBFUAAACKIqgCAABQFEGVutFfHah1EwAAgAnQUOsGwESZ3VjJ/FWbhl22946lU9waAABgvIyoAgAANXGiGXFmzM1cRlSBcemvDmR2Y2XMywAAXjfSjLjErLiZTFAFxsVUawAAJoupv9TESNM4TPEAAICZzYgqNWE0DgAAeCtGVAFghnrxxRdz1VVXZdGiRTly5EiSZM2aNenq6srtt98+eL/R1gBgogiqFMfUX4Cpcdppp6W7uzvt7e1Jkl27duXgwYPZsGFDqtVqduzYMeoaAEwkU38pjmnBAFNj1qxZmTVr1uDtnp6edHR0JEk6OjrS09OTSqUyqlpbW9vUdwCAuiWoAgBJkgMHDmTevHlJkubm5uzZsycNDQ2jqo3k8OHD6e3tnbR29/f3T+rjTzX9Kdt4+9Pa2joJrZkZxrK+6+n1Vk99SY71ZywEVQAgybHQ2dfXlyTp6+tLS0tLKpXKqGojaWpqmtSd9N7e3roKAfpTtnrrz3QwlvVdT89PPfUlGdsXDoljVAGA/9Xe3p4tW7YkSTZv3pz29vZR1wBgIgmqnBTXQwWYvqrVam644Ybs3r07y5cvz5EjR9LU1JSurq5UKpW0tbVl4cKFo6rBTHHO/Pe+5TL7PjBxTP3lpDjxEcD01djYmO7u7uNq559//pD7rV69elQ1mAn++I9m2feBKWBEFQAAgKIIqgAAABRFUGXSOE4DAAAYD8eoMmkcvwoAAIyHEVUAAACKIqgCE26kad8jndYfAAASU3+BSWDaNwAAJ8OIKgAAAEURVAEAACiKoAoAABRppPNeuBRifXOMKgAATID+6kBmN1Zq3Yy64rwXM5egCgAAE0Cogolj6i8AAABFEVQBAAAoiqAKAABAUQRVAAAAiiKoAgAAUBRBFQAAgKIIqgAAABRFUAUAAKAogioAAABFEVQBAAAoiqDKCfVXB2rdBAAAYAZpqHUDqL3+6kBmN1becvnsxkrmr9o07LK9dyydrGYBAAAzlKDKiEE0EUYBAICpZeovAAAARRFUAQAAKIqgCgAAQFEEVQAAAIoiqAIAAFAUQRWYUiNdl9c1ewEASE7i8jQPPvhgHnjggbz22mu56667snbt2uzcuTPnnXdeVq9enSRZs2bNkBows7kuLwAAJzKuEdUXX3wx27Zty7p167J+/fq89NJLOXjwYDZs2JBqtZodO3Zk165dQ2oAAABwIuMaUX3sscfy2muv5frrr8+CBQvy3ve+Nx0dHUmSjo6O9PT0pFKpDKm1tbVNXMsBAACoS+MKqvv27Uu1Ws26dety55135sCBA5k3b16SpLm5OXv27ElDQ8OQ2kgOHz6c3t7eMbWjv79/zL/DMW9cd62trTVuDfwf2/TIvO8BADPBuILqnDlzctFFFyVJPvjBD2bnzp3p6+tLkvT19aWlpSWVSmVIbSRNTU1jDky9vb1C1jhZd5TK63Jktl0AYCYY1zGqF154YZ599tkkx3aaTjnllGzZsiVJsnnz5rS3t6e9vX1IDQAAAE5kXEG1tbU1s2fPzrJly7Jz587ceOONaWpqSldXVyqVStra2rJw4cIhNQAAADiRcV+e5tZbbz3u9nCXn3FJGgAAAMZqXCOqAAAAMFkEVQAAAIoiqAIAwBv0Vwdq3QSY8cZ9jCoAANSj2Y2VzF+1adhle+9YOsWtgZnJiCoAAABFEVQBAAAoiqAKAABAUQRVAAAAiiKoAgAAUBRBFQAAgKIIqjPEm68H1traWqOWQDlGuk6ea+gBANSO66jOEK4HBkPZLgAAymREFQAAgKIYUQUAkiSHDh3KF77whRw6dChz5szJ17/+9dx1113ZuXNnzjvvvKxevTpJsmbNmiE1AJhIRlQBgCTJY489lra2tqxfvz5tbW351re+lYMHD2bDhg2pVqvZsWNHdu3aNaQGABNNUAUAkiTnnHNODh06lCTZv39/kqSjo2Pw/56envT09AypAcBEM/UXAEiS/Omf/ml6enqydOnSnH766fnwhz+cOXPmJEmam5uzZ8+eNDQ0ZN68ecfVTuTw4cPp7e2dtHb39/dP6uNPNf2pPVdHmD7e/Nqajq+3t1JPfUmO9WcsBFUAIEnywAMP5KMf/Wg++9nPZu3atTl06FD6+vqSJH19fWlpaUmlUhlSO5GmpqZJ3fHv7e2tq2ChPzB6b35t1dPrrZ76kgz9UuFETP0FpgXXPIXJd/To0Zx66qlJkne84x1Jki1btiRJNm/enPb29rS3tw+pwXTkswPKZkQVKEZ/dSCzGyvDLnPNU5h8l19+ef7mb/4mP/rRj9LQ0JCvfe1r+cY3vpGurq60tramra0tybER0jfXYLrxuQJlE1SBYthpgNpqaWnJ2rVrj6sNd/kZl6QBYLKZ+ltHTGEBAADqgRHVOmI0iplqpCnDIy0DAKBMgiow7fmSBgCgvpj6CwAAQFEEVQAAAIoiqAIAAFAUQRWoa86GDQAw/TiZElDXnGgJAGD6MaIKAABAUQRVAAAAiiKoTjOOt4OpMdK2ZjsEmB68X8P05RjVacbxdjA1bGsA05/3cpi+jKgCjJHRVgCAyWVEFWCMfEMPADC5jKgCAABQFEEVAACAogiqAAAAFEVQBQAApp3hTmDY2tr6lsuYXpxMCQAAmHac3LC+GVEFAACgKIIqAAAARRFUAQAAKIqgCgDAtOWkOVCfnEwJAIBpywl1oD4ZUQUAAKAogioAAABFEVQBAAAoiqAKAABAUQRVAAAAiiKoAgAAUBRBFWACjXQ9P9f6AwAYHddRBZhArucHAHDyjKgCAABQFEEVAACAogiqAAAAFEVQBQAAoCiCKgAAAEURVAEAACiKoAoAAEBRBFUAAACKIqgCAABQFEEVAACAogiqAAAAFEVQBQAAoCiCaoH6qwO1bgIAAEDNNNS6AQw1u7GS+as2Dbts7x1Lp7g1AAAAU8uIKgAAAEURVAEAACiKoAoAAEBRBFUAAACKIqgCAABQFEEVAACAogiqAAAUzTXmYeZxHVUAYNCDDz6YBx54IK+99lruuuuurF27Njt37sx5552X1atXJ0nWrFkzpAaTyTXmYeYxogoAJElefPHFbNu2LevWrcv69evz0ksv5eDBg9mwYUOq1Wp27NiRXbt2DakBlGakUXgj9NODEVUAIEny2GOP5bXXXsv111+fBQsW5L3vfW86OjqSJB0dHenp6UmlUhlSa2trq2WzAYYwCj/9CaoAQJJk3759qVarWbduXe68884cOHAg8+bNS5I0Nzdnz549aWhoGFI7kcOHD6e3t3fS2t3f3z+pjz/V9Geo1tbWCWoNHDMdtrF6fC8YC0EVAEiSzJkzJxdddFGS5IMf/GB27tyZvr6+JElfX19aWlpSqVSG1E6kqalpUoNGb29vXQUZ/YHJNx1ek/W27Yw1dDtGFQBIklx44YV59tlnkxzboTjllFOyZcuWJMnmzZvT3t6e9vb2ITUAmGgnFVS7u7vT2dmZ5NgZALu6unL77bcPLh+uBgCUqbW1NbNnz86yZcuyc+fO3HjjjWlqakpXV1cqlUra2tqycOHCITUAmGjjnvr7xuNN3ngGwC9/+cvZsWNHKpXKkJoPMwAo26233nrc7eEuP+OSNABMtnGPqN5333258sorkyQ9PT1DzgA4XA0AAABOZFwjqtVqNdu2bcu1116be+65Z0LOCjieMwLW25mwXldPB00DxzvZ96x6fd8DAHijcQXVhx56KJdffvng7ebm5pM+K+B4zghYb2fCAurfyb5ned8DAGaCcU39ff7557Nx48YsX748zz33XF555RVnBQQAAGBCjCuorly5MmvXrs3atWuzYMGC3HTTTc4KCAAAwIQY91l/X7dx48YkzgoIAADAxDip66gCAADARBNUAQAAKIqgCgAAQFEEVQAAAIoiqAIAAFAUQRUAAICiCKoAAAAURVCtkf7qQK2bAAAAUKSGWjdgpprdWMn8VZuGXbb3jqVT3BoAAIByGFEFAACgKIIqAAAARRFUAQAAKIqgCgAAQFEEVQAAAIoiqAIAAFAUQRUAAICiCKoAAAAURVAFAACgKIIqwBTprw6MaxkAwEzTUOsGAMwUsxsrmb9q07DL9t6xdIpbAwBQLiOqAAAAFEVQBQAAoCiCKgAANeU4feDNHKMKAEBNjXQMf+I4fpiJjKgCAABQFEEVAACAogiqAAAAFEVQBQAAoCiCKgAAAEURVAEAmHQuQQOMhcvTAAAw6Ua6BI3LzwBvZkQVAACAogiqAAAAFEVQBQAAoCiCKgAAAEURVAEAACiKoAoAAEBRBFUAAACKIqgCAABQFEEVAACAogiqAAAAFEVQBQAAoCiCKgAAE6K/OjCk1traWoOWANNdQ60bAABAfZjdWMn8VZuGXbb3jqVT3BpgOjOiCgAAzBjDjfyPZhlTy4gqAAAwYxj5nx6MqAIAAFAUQRUAOE53d3c6OzuTJGvWrElXV1duv/32weXD1QBgIgmqAMCgw4cPp7e3N0mya9euHDx4MBs2bEi1Ws2OHTuGrQHARBNUAYBB9913X6688sokSU9PTzo6OpIkHR0d6enpGbYGABPNyZQAgCRJtVrNtm3bcu211+aee+7JgQMHMm/evCRJc3Nz9uzZk4aGhiG1E3njKO1k6O/vn9THn2rTuT+umUo9KGX7m87vBcPp7+8f0/0FVQAgSfLQQw/l8ssvH7zd3Nycvr6+JElfX19aWlpSqVSG1E6kqalpUgNMb29vXQWkeusPTDelbH/19l4w1tBt6i8AkCR5/vnns3HjxixfvjzPPfdcXnnllWzZsiVJsnnz5rS3t6e9vX1IDQAmmqAKACRJVq5cmbVr12bt2rVZsGBBbrrppjQ1NaWrqyuVSiVtbW1ZuHDhkBoATDRTfwGAITZu3JgkWb169ZBlw9UAYCIZUQUAAKAogioAAABFEVQBAAAoiqAKAABAUQRVAAAAiiKoTqL+6kCtmwAAADDtuDzNJJrdWMn8VZuGXbb3jqVT3BoAAIDpwYgqAAAARRFUAQAAKIqgCgAAQFEEVQAAAIoiqAIAAFAUQRUAAICiCKoAAAAURVAFAACgKIIqQAH6qwPjWgYAUI8aat0AAJLZjZXMX7Vp2GV771g6xa0BAKgtI6oAAAAURVAFAACgKIIqAAAARRFUAQAAKIqgCgAAQFEEVQAAAIoiqAIAAFAUQeQNH1AAACAASURBVBUAAICijCuoPv3007nmmmvS2dmZNWvWJEnuvffedHZ25pZbbkm1Wn3LGgAAAIxkXEH1rLPOyrp167Jx48bs27cv27Zty9atW7Nx48ace+65eeSRR7Jv374hNQAAprf+6kCtmwDMAA3j+aW5c+cO/tzY2Jg9e/bk4osvTpJ0dHTkxz/+cd7+9rcPqX3qU5+agCYDAFArsxsrmb9q07DL9t6xdIpbA9SrcQXV1+3evTsvv/xyWlpa8ra3HRucbW5uzv79+7N///7MmTPnuNpIDh8+nN7e3jH9/f7+/jH/zlRqbW2tdROAOvH6e13p73sAABNh3EH11VdfzW233Za77747u3btygsvvJAk6evrS0tLS5qbm4fURtLU1DTmYNfb2ysMAjPC6+913vcAgJlgXMeoHjlyJCtXrsytt96auXPnZtGiRdm+fXuSZPPmzTn//POHrdUjx2kAAABMrHGNqD788MN55plncueddyZJbr755ixZsiSdnZ0566yzcv3116epqWlIrR45TgMAAGBijSuoXnbZZbnsssuOq11wwQVZsWLFcbUVK1YMqQEAAMBIxjX1FwAAoN6MdFifQ/6m1kmd9RcAAKBeOKyvHEZUAQAAKIqgCgAAQFEEVQAAAIoiqAIAAFAUQRUAAICiCKoAAAAURVAFAACgKIIqAAAARRFUAQAAKIqgCgAAQFEEVQAAAIoiqAIUrr86MPhza2vrWy4DAKgXDbVuAAAjm91YyfxVm4ZdtveOpVPcGgCAyWdEFQAAgKIIqgAAABRFUAUAAKAogioAAABFEVQBAAAoiqAKACRJnn766VxzzTXp7OzMmjVrkiT33ntvOjs7c8stt6Rarb5lDQAmkqAKACRJzjrrrKxbty4bN27Mvn37sm3btmzdujUbN27Mueeem0ceeST79u0bUgOAiSaoAgBJkrlz52bWrFlJksbGxuzZsycXX3xxkqSjoyM9PT3ZuXPnkBoATLSGWjcAACjL7t278/LLL6elpSVve9ux77Sbm5uzf//+7N+/P3PmzDmudiKHDx9Ob2/vpLW3v79/Uh9/qpXen9bW1lo3AWpmKrfN0t8Lxqq/v39M9xdUAYBBr776am677bbcfffd2bVrV1544YUkSV9fX1paWtLc3DykdiJNTU2TGm56e3vrKjzVW3+gnkzltllv7wVjDd2m/gIASZIjR45k5cqVufXWWzN37twsWrQo27dvT5Js3rw5559//rA1AJhogioAkCR5+OGH88wzz+TOO+/MsmXL8qtf/SpLlixJZ2dndu/enU984hP5kz/5kyE1AJhopv4CAEmSyy67LJdddtlxtQsuuCArVqw4rrZixYohNaaf/upAZjdWxrwMYCoIqgAAM9Dsxkrmr9o07LK9dywdcRnAZDP1FwAAgKIIqgAAACfQXx0Y1zLGx9RfAACAEzjRdHkmlhFVgGnMt7sAQD0yogowjfl2FwCoR0ZUAQAAKIqgCgAAQFEEVQAAAIoiqI6CE5IAAABMHSdTGgUnKwEAAJg6RlQBAAAoiqAKAABAUQRVAAAAiiKoAgDUKSeEhKkx0rZmOxwfJ1MCAKhTTggJU8O2NvGMqAIAAFAUQRUAAICiCKoAAAAURVAFAACgKIIqAMA05oyiQD1y1l8AgGnM2UaBemREFQAAgKIIqgAAhTO9F5hpTP0FACic6b3ATGNEFQAAgKIIqgAAABRFUP1fjv0AAGrp9X2R1tbWGrcEoPYco/q/HPsB1Jv+6kBmN1bGvRyYWvZFAP6PoApQp0ba6U3s+AIA5TL1FwAAgKIIqgAAAJNkpHPhOE/OWzP1FwBgijg2HGYex5+Pj6AKADBF7LACjI6pvwAAABRFUAUAAKAogioAAABFEVQBAAAoiqAKAABAUQRVAAAAiiKoAgAAUBRBFWCG6q8OjGsZMDLbDzBaI71fnDP/vVPYkvI01LoBANTG7MZK5q/aNOyyvXcsneLWQP2wbQGj5f3irc2oEVXfcAIAAJRvRo2o+sYCAACgfDNqRBUAAIDyCaoADOFESzAy2wHA5JpRU38BGB2HSsDIbCMAk8uIKgAwY5k9AFAmI6oAwIx1opFRo6YAtVF3I6q+/QQAAKa7mT7jo+5GVB0zAjC5+qsDmd1YGfMyqBWvS2A6mum5ZtKD6po1a7Jz586cd955Wb169WT/OQAm2Uz/4OSY0j7fRwqjXrNAvZkJXxpPalDdtWtXDh48mA0bNuTLX/5yduzYkba2tsn8kwDAJKvF5/tIO16tra1JIowCM8ZM+AJuUoNqT09POjo6kiQdHR3p6ekRVAFgmqvF5/tIO2VJ/eyYAZys8Y62ljZKe8rRo0ePTtaDf/Ob38x5552XP/uzP8vmzZvz5JNP5qabbhr2vpdccknOPvvsyWoKANPEb37zm2zdurXWzWAEY/l8T3zGA3DMWD7jJ3VEtbm5OX19fUmSvr6+tLS0vOV97ZQAwPQwls/3xGc8AGM3qZenaW9vz5YtW5IkmzdvTnt7+2T+OQBgCvh8B2CyTWpQXbhwYZqamtLV1ZVKpeL4VACoAz7fAZhsk3qMKgAAAIzVpI6oAgAAwFgJqgAAABRFUAUAAKAo0zaorlmzJl1dXbn99ttr3ZRp4cUXX8xVV12VRYsW5ciRI0msw9F6+umnc80116SzszNr1qxJktx7773p7OzMLbfckmq1WuMWlu3nP/95rrnmmnR1deXv/u7vcvToUa+9Meru7k5nZ2cS2y280U9/+tP8xV/8xeD2kST3339//vzP/zzLli3LP//zP9ewdWM3XH/6+vry+c9/Ptdcc00efPDBGrbu5Ezn5+WN6uk9+Ne//nU6OjqybNmy3HjjjbVuzrjU2/7tm/sz3Z+jk92HnpZBddeuXTl48GA2bNiQarWaHTt21LpJxTvttNPS3d09eAkB63D0zjrrrKxbty4bN27Mvn37sm3btmzdujUbN27Mueeem0ceeaTWTSzae97znvz7v/97NmzYkCTZsWOH194YHD58OL29vUlst/Bm7e3t+dGPfjSk/tnPfjbr16/P3/7t39agVeM3XH/uu+++XHrppfne976X++67L4cPH65R607edH1eXleP78EdHR1Zv359vv3tb9e6KeNSb/u3b+5PMr2fo5Pdh56WQbWnpycdHR1Jjj15PT09NW5R+WbNmpVTTz118LZ1OHpz587NrFmzkiSNjY3Zs2dPLr744iTW3Wg0NjYe9/Pjjz/utTcG9913X6688soktlt4s1NPPTVNTU1D6uvWrcu1116bxx9/vAatGr/h+tPT05MPf/jDqVQqef/735///u//rlHrTt50fV5eV4/vwVu3bk1XV1e6u7tr3ZRxqbf92zf3J5nez9HJ7kNPy6B64MCBzJkzJ0nS3Nyc/fv317hF0491OHa7d+/Oyy+/nJaWFutujH7yk5/ksssuy759+3LkyBHrb5Sq1Wq2bduWD33oQ0lstzAan/jEJ/KjH/0o/+///b/80z/9UwYGBmrdpJPyxu1+zpw5OXDgQI1bND718LzU23vwGWeckf/8z//Md7/73WzevDm7d++udZNOmueoTOPdh26YisZNtObm5vT19SU5duxGS0tLjVs0/ViHY/Pqq6/mtttuy913351du3blhRdeSGLdjdbHP/7xfPzjH89tt92WSqXitTdKDz30UC6//PLB27ZbZqrf/e53ufnmm4+rvfOd78zXvva1Ifd9fbs4/fTTM3/+/Lz00ks588wzp6SdozWW/syZMyd9fX2ZNWtW/vCHP6S5uXmqmjkuJ+pbyc/LidTbe3BTU9PgCP5HPvKR7NmzJ+9///tr3KqT4zkqz8nsQ0/LEdX29vZs2bIlSbJ58+bj5nEzOtbh6B05ciQrV67Mrbfemrlz52bRokXZvn17kmPr7vzzz69xC8v2xuOp5syZk1NOOcVrb5Sef/75bNy4McuXL89zzz2XV155xbpjRpo7d27Wr19/3L/hQl2SwZ3U/v7+/PKXv8zpp58+lU0dlbH054ILLsjjjz+egYGB9Pb25r3vfe8Ut3Zs3qpv0+F5OZF623d6/TlJkieffDLnnHNODVszMTxHZTnZfehpGVQXLlyYpqamdHV1pVKppK2trdZNKl61Ws0NN9yQ3bt3Z/ny5Tly5Ih1OEoPP/xwnnnmmdx5551ZtmxZfvWrX2XJkiXp7OzM7t2784lPfKLWTSzao48+muuuuy7XXXddXnrppaxYscJrb5RWrlyZtWvXZu3atVmwYEFuuukm6w7e4JlnnskNN9yQPXv25IYbbsj//M//pLu7O3/1V3+VZcuW5XOf+9xxx8mXbrj+fOYzn8mPf/zjXHvttfnLv/zLYY/JnQ6m8/Pyunrb//yv//qvXH311bnmmmty5plnTssv3utt//bN/enu7p7Wz9HJ7kOfcvTo0aNT1FYAAAA4oWk5ogoAAED9ElQBAAAoiqAKAABAUQRVAAAAiiKoAgAAUBRBFQAAgKIIqgAAABRFUAUAAKAogioAAABFEVQBAAAoiqAKAABAUQRVAAAAiiKoAgAAUBRBFQAAgKIIqgAAABRFUAUAAKAogioAAABFEVQBAAAoiqAKAABAUQRVAAAAiiKoAgAAUBRBFQAAgKIIqgAAABRFUAUAAKAogioAAABFEVQBAAAoiqAKAABAUQRVAAAAiiKoAgAAUBRBFQAAgKIIqgAAABRFUAUAAKAogioAAABFEVQBAAAoiqAKAABAUQRVAAAAiiKoAgAAUBRBFQAAgKIIqgAAABRFUAUAAKAogioAAABFEVQBAAAoiqAKAABAUQRVAAAAiiKoAgAAUBRBFQAAgKIIqgAAABRFUAUAAKAogioAAABFEVQBAAAoiqAKAABAUQRVAAAAiiKoAgAAUBRBFQAAgKIIqgAAABRFUAUAAKAogioAAABFEVQBAAAoiqAKAABAUQRVAAAAiiKoAgAAUBRBFQAAgKIIqgAAABRFUAUAAKAogioAAABFEVQBAAAoiqAKAABAUQRVAAAAiiKoAgAAUBRBFQAAgKIIqgAAABRFUAUAAKAogioAAABFEVQBAAAoiqAKAABAUQRVAAAAiiKoAgAAUBRBFQAAgKIIqgAAABRFUAUAAKAogioAAABFEVQBAAAoiqAKAABAUQRVAAAAiiKoAgAAUBRBFQAAgKIIqgAAABRFUAUAAKAogioAAABFEVQBAAAoiqAKAABAUQRVAAAAiiKoAgAAUBRBFQAAgKIIqgAAABRFUAUAAKAogioAAABFEVQBAAAoiqAKAABAUQRVAAAAiiKoAgAAUBRBFQAAgKIIqgAAABRFUAUAAKAogioAAABFEVQBAAAoiqAKAABAUQRVAAAAiiKoAgAAUBRBFQAAgKIIqgAAABRFUAUAAKAoDbVuAEwHF1xwweDPhw4dSlNTUyqVSpLkK1/5SgYGBrJ+/frs3bs3c+bMyWWXXZabb745DQ3HNrGPfexj+e1vf5tHH300p59++uBjXXnllent7c1PfvKT/O53v8uNN96YJ554YvCxV69enU2bNg2pve1tb8s//MM/ZNmyZenp6Rn8O0lyySWX5NJLL82Xv/zlJMnAwEAOHz6cP/qjPxq8z1NPPTVJawoAAE6eoAqj8MZg97GPfSy33357Ojo6BmsbNmzIF7/4xbS1teWVV17JX//1X+fb3/52VqxYMXifs88+O5s2bcqyZcuSJM8++2wOHTo0uPwDH/hAjh49ml27dqWtrS1J8sQTT+Rd73rXcbXt27fnpptuGvy9v//7v89nPvOZIW3+9Kc/nSTZunVrVq5cmUcffXQiVgUAAEw6U39hAnR1dWXJkiVpamrKmWeemcsvvzxPPvnkcfe54oor8uCDDw7efvDBB3PllVcO3m5sbMz555+fJ554Ikmyb9++VKvVfOpTnzqutnfv3lx00UVT0CsAAKgNQRUmwfbt27NgwYLjau3t7enr68svfvGLDAwMZNOmTYOjnq+76KKLsn379sHHWLx4cRYvXnxc7d3vfnfe9a53TU1HAACgBgRVmGA//OEPs3Pnztx4441Dlr0+qvqzn/0s73vf+3LmmWcet/yiiy7Kk08+maNHj+aJJ57IkiVL0t7enqeffnqwdvHFFx/3O7fffnuWLFky+O/uu++e1P4BAMBkc4wqTKBHHnkkX/3qV/Od73znuJMmve6KK67Iddddl1//+te54oorhixvb2/PH/7wh/z85z/PE088kc7OzvzxH/9x3vWudw3WXj/G9XWrV68e9hhVAACYroyowgR59P+3d7ehdd/1/8df+50kDdLEOa3Criz+hjMrzTK7TYkgiqJgFXS3bLRMdnVrKEzmeqN33GapbuA2RYas0lpsUcFLChPE4W8Q24kSu5Z0VLSKgw2tzjZ0oafZ/jdk/dvlqj1Nct45eTxApJ9P2ry/O+shz32+55z/+79s3bo1jz/+eK699toZv+aKK67IlVdemV//+tf5yEc+Mm1/1apVWb9+fZ566qn8/e9/z//+7/8mSW688cY89dRTee6557w+FQCAjudEFRbAb37zm9x777355je/efbdeWfzla98Jf/+97/zhje8IWfOnJm2f9NNN+W73/1u3v3ud59d27BhQ7785S9nzZo1ufrqqxd8fgAAqMSJKiyAb33rWzl58mTuuuuu3HDDDbnhhhtyxx13zPi1V199ddavXz/rn3XTTTfl+PHj2bBhw9m1DRs25Pjx47nxxhunff39999/9nvecMMNueWWWy7+ggAAoI0uefXVV19t9xAAAADwGieqAAAAlCJUAQAAKEWoAgAAUIpQBQAAoJQyH0/znve8J1dcccWs+6dPn05PT88STrS0Ov36EtfYCTr9+hLXWMHz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6ThRBWCaue4kcZcJALDYnKgCMI07SQCAdnKiCgAAQClCFQAAgFIW/dbfbdu25dChQ7nuuuuydevWxf52AAAALHOLeqJ6+PDhnDp1Knv27Emz2czBgwcX89slaf0NQLw5CAAAQA2LeqI6NjaW4eHhJMnw8HDGxsYyODi4mN9y3jcAaXUPgP+YbE6lt7txwXsAAOfrkldfffXVxfrDH3/88Vx33XV5//vfn9HR0fz+97/P3XffPePXvuc978kVV1yxWKMAsEw8//zzOXDgQLvHAADaaFFPVPv6+jIxMZEkmZiYSH9//6xf64cSAAAAkkV+jerQ0FD279+fJBkdHc3Q0NBifjsAAAA6wKKG6rp169LT05ORkZE0Go1Ff30qAAAAy9+ivkYVAAAALtSinqgCAADAhRKqAAAAlLKsQvVHP/pRPvrRj2bz5s352te+1u5xFsy2bdsyMjKSBx98sN2jLIq//e1vGR4ezubNm3Pbbbe1e5wF9eKLL+ZTn/pU1q9fnzNnziTprMfz9dfXiY/lH/7wh3z605/Opk2bsm3btiTJE088kU2bNuWLX/xims1mmye8ODNd34YNG7J58+Zs3rw5L730UpsnBACYblmFapLccccd2b17d770pS+1e5QFcfjw4Zw6dSp79uxJs9nMwYMH2z3SohgeHs7u3bvzne98p92jLKhLL700O3fuPPuO1p32eL7++pLOeywvv/zy7Nq1K3v37s3x48fzzDPP5MCBA9m7d2+uvfba/PKXv2z3iBfl9df33HPP5Z3vfGd2796d3bt359JLL233iAAA0yy7UN21a1c+85nP5De/+U27R1kQY2NjGR4eTvKfABgbG2vzRIvjwIEDGRkZyc6dO9s9yoJatWpV3vjGN579dac9nq+/vqTzHss1a9Zk1apVSZLu7u4cPXo0N998c5LOeAxff32NRiN/+tOfMjIykocffjjeTw8AqGhZheqHP/zh/OxnP8s3vvGNfPWrX83U1FS7R7poJ0+ezOrVq5MkfX19OXHiRJsnWnhvfetb84tf/CLf/e53Mzo6miNHjrR7pEXT6Y9nJz+WR44cyT//+c/09/d35GP42vVdc801+cUvfpHvfe97OXHiRH71q1+1ezQAgGm62j3ATP7+97/nnnvuOWftLW95S77+9a8nSS677LKsXbs2//jHP/K2t72tHSMumL6+vkxMTCRJJiYm0t/f3+aJFl5PT096enqSJB/4wAdy9OjRvOtd72rzVIuj0x/PTn0sX3rppTzwwAN55JFHcvjw4bzwwgtJOucx/O/rS3L2dt8PfehDGR8fz4c+9KF2jgcAME3JE9U1a9acff3Ua//7+te/fjYAJicn85e//CWXXXZZmye9eENDQ9m/f3+SZHR09JzXAnaK1x63JPn973+fq6++uo3TLK5Ofzw78bE8c+ZM7r333tx3331Zs2ZN1q9fn9/+9rdJ/vMYXn/99W2e8OK8/vpOnTp19m6UTnkMAYDOU/JEdTY7d+7M008/nVdeeSV33nlnuru72z3SRVu3bl16enoyMjKSgYGBDA4OtnukBfe73/0ujz76aHp6erJhw4Zl/4P/f2s2m7nzzjtz5MiR3H777bnnnns66vF8/fXddNNN+dWvftVRj+WTTz6ZZ599Ng899FCS5J577smNN96YTZs25fLLL8+tt97a5gkvzkzXd//99+cNb3hDrrzyynz+859v84QAANNd8qp30gAAAKCQkrf+AgAAsHIJVQAAAEoRqgAAAJQiVAEAAChFqAIAAFCKUAUAAKAUoQoAAEApQhUAAIBS/h+WgOLaY/1qSwAAAABJRU5ErkJggg==\n","text/plain":["<Figure size 1152x1440 with 4 Axes>"]},"metadata":{}}],"source":["y_test.hist(figsize=(16, 20), bins=50, xlabelsize=8, ylabelsize=8); # ; avoid having the matplotlib verbose informations"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":316,"status":"ok","timestamp":1642071221483,"user":{"displayName":"Charles Oredola","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnpwCalP23D3Pr8M6WnJ42nMBIpm7KfjhgDPqn=s64","userId":"14286154376090524793"},"user_tz":-60},"id":"WcbBycBBMv9v","outputId":"f8534237-f56d-4136-c21f-d388e2d9fd08"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Actual                T2M  T2MDEW  T2MWET\n","5065   26.69    8...\n","Predicted    [[28.57997601952826, 9.12632169457931, 18.8531...\n","dtype: object"]},"metadata":{},"execution_count":22}],"source":["df = pd.Series({'Actual': y_test, 'Predicted': predictions})\n","df"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":313,"status":"ok","timestamp":1642071229069,"user":{"displayName":"Charles Oredola","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnpwCalP23D3Pr8M6WnJ42nMBIpm7KfjhgDPqn=s64","userId":"14286154376090524793"},"user_tz":-60},"id":"0Mmws6zZK4HW","outputId":"ed0eb1f7-a8b1-4711-a77e-8f2cb7071588"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.9235221339436003"]},"metadata":{},"execution_count":23}],"source":["model.score(X_test, y_test)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":330,"status":"ok","timestamp":1642071234591,"user":{"displayName":"Charles Oredola","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnpwCalP23D3Pr8M6WnJ42nMBIpm7KfjhgDPqn=s64","userId":"14286154376090524793"},"user_tz":-60},"id":"IsEP4ajBMJn-","outputId":"75f736ac-35a4-452d-a07f-de4067919f8b"},"outputs":[{"output_type":"stream","name":"stdout","text":["Coefficients: \n"," [[ 2.28616316e+00 -3.49728553e-01 -3.54979325e+00  1.21709065e+00\n","  -8.13300096e-01  1.05849407e-03 -2.03659864e-04]\n"," [ 2.78827680e+00  9.79522171e-03  6.66261337e-03  4.19330833e-02\n","  -1.64573294e-02  5.31870103e-04 -3.80398969e-05]\n"," [ 2.53719475e+00 -1.69963344e-01 -1.77170804e+00  6.29512096e-01\n","  -4.14892357e-01  7.94515594e-04 -1.20112525e-04]]\n","Interception: \n"," [371.1962758  -12.28658195 179.46896559]\n","Mean squared error: 4.23\n","Coefficient of determination: 0.92\n"]}],"source":["# The coefficients\n","print('Coefficients: \\n', model.coef_)\n","\n","# The interception\n","print('Interception: \\n', model.intercept_)\n","\n","# The mean squared error\n","print('Mean squared error: %.2f'\n","      % mean_squared_error(y_test, predictions))\n","\n","# The coefficient of determination: 1 is perfect prediction\n","print('Coefficient of determination: %.2f'\n","      % r2_score(y_test, predictions))"]},{"cell_type":"code","source":["print(type(y_test))\n","print(type(y_train))\n","print(type(X_test))\n","print(type(X_train))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NG25mVKTfBd_","executionInfo":{"status":"ok","timestamp":1642071337269,"user_tz":-60,"elapsed":340,"user":{"displayName":"Charles Oredola","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnpwCalP23D3Pr8M6WnJ42nMBIpm7KfjhgDPqn=s64","userId":"14286154376090524793"}},"outputId":"77be31b9-3584-49a4-f919-14df6ea87513"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","<class 'pandas.core.frame.DataFrame'>\n","<class 'pandas.core.frame.DataFrame'>\n","<class 'pandas.core.frame.DataFrame'>\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":332,"status":"ok","timestamp":1642071342826,"user":{"displayName":"Charles Oredola","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnpwCalP23D3Pr8M6WnJ42nMBIpm7KfjhgDPqn=s64","userId":"14286154376090524793"},"user_tz":-60},"id":"Wh_ng2r6QyuO","outputId":"b89877c1-e6bc-42d2-f350-7cd954df0d83"},"outputs":[{"output_type":"stream","name":"stdout","text":["(26302, 7)\n","(61370, 7)\n","(26302, 3)\n","(61370, 3)\n"]}],"source":["print(X_test.shape)\n","print(X_train.shape)\n","print(y_test.shape)\n","print(y_train.shape)"]},{"cell_type":"code","source":["y_test.res = y_test.to_numpy()\n","y_train.res = y_train.to_numpy()\n","X_test.res = X_test.to_numpy()\n","X_train.res = X_train.to_numpy()"],"metadata":{"id":"j4K1TPMnQxRe","executionInfo":{"status":"ok","timestamp":1642071349097,"user_tz":-60,"elapsed":340,"user":{"displayName":"Charles Oredola","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnpwCalP23D3Pr8M6WnJ42nMBIpm7KfjhgDPqn=s64","userId":"14286154376090524793"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"c50f9648-6cfe-4b03-b2fc-b00bf6277f80"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:1: UserWarning: Pandas doesn't allow columns to be created via a new attribute name - see https://pandas.pydata.org/pandas-docs/stable/indexing.html#attribute-access\n","  \"\"\"Entry point for launching an IPython kernel.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:2: UserWarning: Pandas doesn't allow columns to be created via a new attribute name - see https://pandas.pydata.org/pandas-docs/stable/indexing.html#attribute-access\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:3: UserWarning: Pandas doesn't allow columns to be created via a new attribute name - see https://pandas.pydata.org/pandas-docs/stable/indexing.html#attribute-access\n","  This is separate from the ipykernel package so we can avoid doing imports until\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: UserWarning: Pandas doesn't allow columns to be created via a new attribute name - see https://pandas.pydata.org/pandas-docs/stable/indexing.html#attribute-access\n","  after removing the cwd from sys.path.\n"]}]},{"cell_type":"code","source":["y_test.new = y_test.res.flatten()\n","y_train.new = y_train.res.flatten()\n","X_test.new = X_test.res.flatten()\n","X_train.new = X_train.res.flatten()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yTznIL5VX4HU","executionInfo":{"status":"ok","timestamp":1642071351412,"user_tz":-60,"elapsed":347,"user":{"displayName":"Charles Oredola","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnpwCalP23D3Pr8M6WnJ42nMBIpm7KfjhgDPqn=s64","userId":"14286154376090524793"}},"outputId":"0097c171-53bd-44c8-fd53-99f76652f281"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:1: UserWarning: Pandas doesn't allow columns to be created via a new attribute name - see https://pandas.pydata.org/pandas-docs/stable/indexing.html#attribute-access\n","  \"\"\"Entry point for launching an IPython kernel.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:2: UserWarning: Pandas doesn't allow columns to be created via a new attribute name - see https://pandas.pydata.org/pandas-docs/stable/indexing.html#attribute-access\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:3: UserWarning: Pandas doesn't allow columns to be created via a new attribute name - see https://pandas.pydata.org/pandas-docs/stable/indexing.html#attribute-access\n","  This is separate from the ipykernel package so we can avoid doing imports until\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: UserWarning: Pandas doesn't allow columns to be created via a new attribute name - see https://pandas.pydata.org/pandas-docs/stable/indexing.html#attribute-access\n","  after removing the cwd from sys.path.\n"]}]},{"cell_type":"code","source":["print(y_test.new.shape)\n","print(X_test.new.shape)\n","print(y_train.new.shape)\n","print(X_train.new.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-6dG_JtYY6l6","executionInfo":{"status":"ok","timestamp":1642071355746,"user_tz":-60,"elapsed":320,"user":{"displayName":"Charles Oredola","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnpwCalP23D3Pr8M6WnJ42nMBIpm7KfjhgDPqn=s64","userId":"14286154376090524793"}},"outputId":"761d05d4-222a-49c9-91ec-3f86ff3d281b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(78906,)\n","(184114,)\n","(184110,)\n","(429590,)\n"]}]},{"cell_type":"code","source":["new_predictions = predictions.flatten()"],"metadata":{"id":"7wnd-49DQw24"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["new_predictions.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_KDPNFo-ZhZh","executionInfo":{"status":"ok","timestamp":1642071362762,"user_tz":-60,"elapsed":393,"user":{"displayName":"Charles Oredola","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnpwCalP23D3Pr8M6WnJ42nMBIpm7KfjhgDPqn=s64","userId":"14286154376090524793"}},"outputId":"73aa64da-1a76-4e24-c1ff-b332bfb15f82"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(78906,)"]},"metadata":{},"execution_count":33}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"executionInfo":{"elapsed":936,"status":"ok","timestamp":1642071366294,"user":{"displayName":"Charles Oredola","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnpwCalP23D3Pr8M6WnJ42nMBIpm7KfjhgDPqn=s64","userId":"14286154376090524793"},"user_tz":-60},"id":"kwNF3izVEmFZ","outputId":"29702336-6df9-4f45-c79f-dfbc44962a22"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fb93a3f3750>"]},"metadata":{},"execution_count":34},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{}}],"source":["sns.regplot(x = y_test.new, y = new_predictions, ci=None, color=\"b\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":352},"executionInfo":{"elapsed":1912,"status":"ok","timestamp":1642071375436,"user":{"displayName":"Charles Oredola","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnpwCalP23D3Pr8M6WnJ42nMBIpm7KfjhgDPqn=s64","userId":"14286154376090524793"},"user_tz":-60},"id":"cc-jDG4wJ3df","outputId":"d4e3e7ce-ad0b-40ad-dd72-63e5e17f7048"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `kdeplot` (an axes-level function for kernel density plots).\n","  warnings.warn(msg, FutureWarning)\n","/usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `kdeplot` (an axes-level function for kernel density plots).\n","  warnings.warn(msg, FutureWarning)\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{}}],"source":["ax1 = sns.distplot(y_test, hist=False, color=\"r\", label=\"Actual Value\")\n","sns.distplot(predictions, hist=False, color=\"b\", label=\"Fitted Values\" , ax=ax1)\n","plt.rcParams.update({'figure.figsize':(10,8), 'figure.dpi':100})"]},{"cell_type":"code","source":["# Plot outputs\n","plt.plot(y_test.new, new_predictions, color='blue', linewidth=3)\n","\n","plt.xticks(())\n","plt.yticks(())\n","\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":438},"id":"9g_gzrvRDFUK","executionInfo":{"status":"ok","timestamp":1642072151869,"user_tz":-60,"elapsed":1410,"user":{"displayName":"Charles Oredola","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnpwCalP23D3Pr8M6WnJ42nMBIpm7KfjhgDPqn=s64","userId":"14286154376090524793"}},"outputId":"cb951721-3f69-44fd-b799-a1d258f2c20f"},"execution_count":null,"outputs":[{"output_type":"error","ename":"OverflowError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mOverflowError\u001b[0m                             Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py\u001b[0m in \u001b[0;36mdraw_path\u001b[0;34m(self, gc, path, transform, rgbFace)\u001b[0m\n\u001b[1;32m    151\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 152\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_renderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw_path\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtransform\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrgbFace\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    153\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mOverflowError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mOverflowError\u001b[0m: In draw_path: Exceeded cell block limit","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mOverflowError\u001b[0m                             Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/IPython/core/formatters.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, obj)\u001b[0m\n\u001b[1;32m    332\u001b[0m                 \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    333\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 334\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mprinter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    335\u001b[0m             \u001b[0;31m# Finally look for special method names\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    336\u001b[0m             \u001b[0mmethod\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_real_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprint_method\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/IPython/core/pylabtools.py\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(fig)\u001b[0m\n\u001b[1;32m    239\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    240\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;34m'png'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mformats\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 241\u001b[0;31m         \u001b[0mpng_formatter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfor_type\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mFigure\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0mfig\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mprint_figure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'png'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    242\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;34m'retina'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mformats\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;34m'png2x'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mformats\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    243\u001b[0m         \u001b[0mpng_formatter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfor_type\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mFigure\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0mfig\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mretina_figure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/IPython/core/pylabtools.py\u001b[0m in \u001b[0;36mprint_figure\u001b[0;34m(fig, fmt, bbox_inches, **kwargs)\u001b[0m\n\u001b[1;32m    123\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    124\u001b[0m     \u001b[0mbytes_io\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mBytesIO\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 125\u001b[0;31m     \u001b[0mfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcanvas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprint_figure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbytes_io\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    126\u001b[0m     \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbytes_io\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetvalue\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    127\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mfmt\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'svg'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/backend_bases.py\u001b[0m in \u001b[0;36mprint_figure\u001b[0;34m(self, filename, dpi, facecolor, edgecolor, orientation, format, bbox_inches, **kwargs)\u001b[0m\n\u001b[1;32m   2124\u001b[0m                     \u001b[0morientation\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0morientation\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2125\u001b[0m                     \u001b[0mbbox_inches_restore\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0m_bbox_inches_restore\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2126\u001b[0;31m                     **kwargs)\n\u001b[0m\u001b[1;32m   2127\u001b[0m             \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2128\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mbbox_inches\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mrestore_bbox\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py\u001b[0m in \u001b[0;36mprint_png\u001b[0;34m(self, filename_or_obj, metadata, pil_kwargs, *args, **kwargs)\u001b[0m\n\u001b[1;32m    512\u001b[0m         }\n\u001b[1;32m    513\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 514\u001b[0;31m         \u001b[0mFigureCanvasAgg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    515\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mpil_kwargs\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    516\u001b[0m             \u001b[0;32mfrom\u001b[0m \u001b[0mPIL\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mImage\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py\u001b[0m in \u001b[0;36mdraw\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    391\u001b[0m              (self.toolbar._wait_cursor_for_draw_cm() if self.toolbar\n\u001b[1;32m    392\u001b[0m               else nullcontext()):\n\u001b[0;32m--> 393\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    394\u001b[0m             \u001b[0;31m# A GUI class may be need to update a window using this draw, so\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    395\u001b[0m             \u001b[0;31m# don't forget to call the superclass.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36mdraw_wrapper\u001b[0;34m(artist, renderer, *args, **kwargs)\u001b[0m\n\u001b[1;32m     36\u001b[0m                 \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     37\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 38\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0martist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     39\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0martist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_agg_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/figure.py\u001b[0m in \u001b[0;36mdraw\u001b[0;34m(self, renderer)\u001b[0m\n\u001b[1;32m   1734\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpatch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1735\u001b[0m             mimage._draw_list_compositing_images(\n\u001b[0;32m-> 1736\u001b[0;31m                 renderer, self, artists, self.suppressComposite)\n\u001b[0m\u001b[1;32m   1737\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1738\u001b[0m             \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclose_group\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'figure'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/image.py\u001b[0m in \u001b[0;36m_draw_list_compositing_images\u001b[0;34m(renderer, parent, artists, suppress_composite)\u001b[0m\n\u001b[1;32m    135\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mnot_composite\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mhas_images\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    136\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0ma\u001b[0m \u001b[0;32min\u001b[0m \u001b[0martists\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 137\u001b[0;31m             \u001b[0ma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    138\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    139\u001b[0m         \u001b[0;31m# Composite any adjacent images together\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36mdraw_wrapper\u001b[0;34m(artist, renderer, *args, **kwargs)\u001b[0m\n\u001b[1;32m     36\u001b[0m                 \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     37\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 38\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0martist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     39\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0martist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_agg_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/axes/_base.py\u001b[0m in \u001b[0;36mdraw\u001b[0;34m(self, renderer, inframe)\u001b[0m\n\u001b[1;32m   2628\u001b[0m             \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstop_rasterizing\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2629\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2630\u001b[0;31m         \u001b[0mmimage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_draw_list_compositing_images\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0martists\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2631\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2632\u001b[0m         \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclose_group\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'axes'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/image.py\u001b[0m in \u001b[0;36m_draw_list_compositing_images\u001b[0;34m(renderer, parent, artists, suppress_composite)\u001b[0m\n\u001b[1;32m    135\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mnot_composite\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mhas_images\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    136\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0ma\u001b[0m \u001b[0;32min\u001b[0m \u001b[0martists\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 137\u001b[0;31m             \u001b[0ma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    138\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    139\u001b[0m         \u001b[0;31m# Composite any adjacent images together\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36mdraw_wrapper\u001b[0;34m(artist, renderer, *args, **kwargs)\u001b[0m\n\u001b[1;32m     36\u001b[0m                 \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     37\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 38\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0martist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     39\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0martist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_agg_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/lines.py\u001b[0m in \u001b[0;36mdraw\u001b[0;34m(self, renderer)\u001b[0m\n\u001b[1;32m    800\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    801\u001b[0m                 \u001b[0mgc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_dashes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_dashOffset\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_dashSeq\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 802\u001b[0;31m                 \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw_path\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtpath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maffine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfrozen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    803\u001b[0m                 \u001b[0mgc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrestore\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    804\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py\u001b[0m in \u001b[0;36mdraw_path\u001b[0;34m(self, gc, path, transform, rgbFace)\u001b[0m\n\u001b[1;32m    152\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_renderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw_path\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtransform\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrgbFace\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    153\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mOverflowError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 154\u001b[0;31m                 raise OverflowError(\"Exceeded cell block limit (set \"\n\u001b[0m\u001b[1;32m    155\u001b[0m                                     \"'agg.path.chunksize' rcparam)\")\n\u001b[1;32m    156\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mOverflowError\u001b[0m: Exceeded cell block limit (set 'agg.path.chunksize' rcparam)"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x800 with 1 Axes>"]},"metadata":{}}]},{"cell_type":"code","source":["sns.Implot(x = y_test.new, y = new_predictions, ci=None, color=\"b\", data = df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":162},"id":"ABh9sBCbF1s3","executionInfo":{"status":"error","timestamp":1642072166665,"user_tz":-60,"elapsed":331,"user":{"displayName":"Charles Oredola","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnpwCalP23D3Pr8M6WnJ42nMBIpm7KfjhgDPqn=s64","userId":"14286154376090524793"}},"outputId":"62a7fbcb-9f4e-4e9e-8b5d-f1ba4781485c"},"execution_count":null,"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-43-eb2005c45379>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0msns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mImplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0my_test\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnew\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnew_predictions\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mci\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"b\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mAttributeError\u001b[0m: module 'seaborn' has no attribute 'Implot'"]}]}],"metadata":{"colab":{"collapsed_sections":[],"name":"Solar Prediction","provenance":[],"toc_visible":true},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}